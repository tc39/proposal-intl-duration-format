<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Intl.DurationFormat
stage: 3
location: https://tc39.es/proposal-intl-duration-format/
contributors: Ujjwal Sharma, Younies Mahmoud
</pre>
<emu-biblio href="./biblio.json"></emu-biblio>
<emu-clause id="durationformat-objects">
  <h1>DurationFormat Objects</h1>

  <emu-clause id="sec-intl-durationformat-abstracts">
    <h1>Abstract Operations for DurationFormat Objects</h1>

    <p>Several DurationFormat algorithms use values from the following table, which provides internal slots and property names for Duration instances, and which is also used to key Records of templates to format individual Duration components:</p>

    <emu-table id="table-duration-components">
      <emu-caption>Components of Duration Instances</emu-caption>
      <table class="real-table">
        <thead>
          <tr>
            <th>Value Slot</th>
            <th>Style Slot</th>
            <th>Display Slot</th>
            <th>Unit</th>
            <th>NumberFormat Unit</th>
            <th>Values</th>
            <th>Digital Default</th>
          </tr>
        </thead>
        <tr>
          <td>[[Years]]</td>
          <td>[[YearsStyle]]</td>
          <td>[[YearsDisplay]]</td>
          <td>*"years"*</td>
          <td>*"year"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"* &raquo;</td>
          <td>*"short"*</td>
        </tr>
        <tr>
          <td>[[Months]]</td>
          <td>[[MonthsStyle]]</td>
          <td>[[MonthsDisplay]]</td>
          <td>*"months"*</td>
          <td>*"month"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"* &raquo;</td>
          <td>*"short"*</td>
        </tr>
        <tr>
          <td>[[Weeks]]</td>
          <td>[[WeeksStyle]]</td>
          <td>[[WeeksDisplay]]</td>
          <td>*"weeks"*</td>
          <td>*"week"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"* &raquo;</td>
          <td>*"short"*</td>
        </tr>
        <tr>
          <td>[[Days]]</td>
          <td>[[DaysStyle]]</td>
          <td>[[DaysDisplay]]</td>
          <td>*"days"*</td>
          <td>*"day"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"* &raquo;</td>
          <td>*"short"*</td>
        </tr>
        <tr>
          <td>[[Hours]]</td>
          <td>[[HoursStyle]]</td>
          <td>[[HoursDisplay]]</td>
          <td>*"hours"*</td>
          <td>*"hour"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"*, *"2-digit"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
        <tr>
          <td>[[Minutes]]</td>
          <td>[[MinutesStyle]]</td>
          <td>[[MinutesDisplay]]</td>
          <td>*"minutes"*</td>
          <td>*"minute"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"*, *"2-digit"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
        <tr>
          <td>[[Seconds]]</td>
          <td>[[SecondsStyle]]</td>
          <td>[[SecondsDisplay]]</td>
          <td>*"seconds"*</td>
          <td>*"second"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"*, *"2-digit"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
        <tr>
          <td>[[Milliseconds]]</td>
          <td>[[MillisecondsStyle]]</td>
          <td>[[MillisecondsDisplay]]</td>
          <td>*"milliseconds"*</td>
          <td>*"millisecond"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
        <tr>
          <td>[[Microseconds]]</td>
          <td>[[MicrosecondsStyle]]</td>
          <td>[[MicrosecondsDisplay]]</td>
          <td>*"microseconds"*</td>
          <td>*"microsecond"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
        <tr>
          <td>[[Nanoseconds]]</td>
          <td>[[NanosecondsStyle]]</td>
          <td>[[NanosecondsDisplay]]</td>
          <td>*"nanoseconds"*</td>
          <td>*"nanosecond"*</td>
          <td>&laquo; *"long"*, *"short"*, *"narrow"*, *"numeric"* &raquo;</td>
          <td>*"numeric"*</td>
        </tr>
      </table>
    </emu-table>

    <emu-clause id="sec-duration-records">
      <h1>Duration Records</h1>
      <p>A <dfn variants="Duration Records">Duration Record</dfn> is a Record value used to represent a Duration.</p>
      <p>Duration Records have the fields listed in the Value Slot column of <emu-xref href="#table-duration-components"></emu-xref></p>
    </emu-clause>

    <emu-clause id="sec-tointegerwithoutrounding" type="abstract operation">
      <h1>
        ToIntegerIfIntegral (
          _argument_: an ECMAScript language value,
        ): either a normal completion containing an integer, or an abrupt completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It converts _argument_ to an integer representing its Number value (replacing *NaN* with 0), or throws a *RangeError* when that Number value is not a finite integral Number.</dd>
      </dl>
      <emu-alg>
        1. Let _number_ be ? ToNumber(_argument_).
        1. If _number_ is *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return 0.
        1. If IsIntegralNumber(_number_) is *false*, throw a *RangeError* exception.
        1. Return ‚Ñù(_number_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-todurationrecord" type="abstract operation">
      <h1>
        ToDurationRecord (
          _input_: an ECMAScript language value
        ): either a normal completion containing a Duration Record, or an abrupt completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It converts a given object that represents a Duration into a Duration Record.</dd>
      </dl>

      <emu-alg>
        1. If Type(_input_) is not Object, throw a *TypeError* exception.
        1. Let _result_ be a new Duration Record with each field set to 0.
        1. Let _days_ be ? Get(_input_, *"days"*).
        1. If _days_ is not *undefined*, set _result_.[[Days]] to ? ToIntegerIfIntegral(_days_).
        1. Let _hours_ be ? Get(_input_, *"hours"*).
        1. If _hours_ is not *undefined*, set _result_.[[Hours]] to ? ToIntegerIfIntegral(_hours_).
        1. Let _microseconds_ be ? Get(_input_, *"microseconds"*).
        1. If _microseconds_ is not *undefined*, set _result_.[[Microseconds]] to ? ToIntegerIfIntegral(_microseconds_).
        1. Let _milliseconds_ be ? Get(_input_, *"milliseconds"*).
        1. If _milliseconds_ is not *undefined*, set _result_.[[Milliseconds]] to ? ToIntegerIfIntegral(_milliseconds_).
        1. Let _minutes_ be ? Get(_input_, *"minutes"*).
        1. If _minutes_ is not *undefined*, set _result_.[[Minutes]] to ? ToIntegerIfIntegral(_minutes_).
        1. Let _months_ be ? Get(_input_, *"months"*).
        1. If _months_ is not *undefined*, set _result_.[[Months]] to ? ToIntegerIfIntegral(_months_).
        1. Let _nanoseconds_ be ? Get(_input_, *"nanoseconds"*).
        1. If _nanoseconds_ is not *undefined*, set _result_.[[Nanoseconds]] to ? ToIntegerIfIntegral(_nanoseconds_).
        1. Let _seconds_ be ? Get(_input_, *"seconds"*).
        1. If _seconds_ is not *undefined*, set _result_.[[Seconds]] to ? ToIntegerIfIntegral(_seconds_).
        1. Let _weeks_ be ? Get(_input_, *"weeks"*).
        1. If _weeks_ is not *undefined*, set _result_.[[Weeks]] to ? ToIntegerIfIntegral(_weeks_).
        1. Let _years_ be ? Get(_input_, *"years"*).
        1. If _years_ is not *undefined*, set _result_.[[Years]] to ? ToIntegerIfIntegral(_years_).
        1. If _years_, _months_, _weeks_, _days_, _hours_, _minutes_, _seconds_, _milliseconds_, _microseconds_, and _nanoseconds_ are all *undefined*, throw a *TypeError* exception.
        1. If IsValidDurationRecord(_result_) is *false*, throw a *RangeError* exception.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-durationrecordsign" type="abstract operation">
      <h1>
        DurationRecordSign (
          _record_: a Duration Record
        ): an integer
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It returns 1 if the most significant non-zero field in _record_ is positive, and -1 if the most significant non-zero field is negative. If all the fields are zero, it returns 0.</dd>
      </dl>
      <emu-alg>
        1. For each row of <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _valueSlot_ be the Value Slot value of the current row.
          1. Let _v_ be _record_.[[&lt;_valueSlot_&gt;]].
          1. If _v_ &lt; 0, return -1.
          1. If _v_ &gt; 0, return 1.
        1. Return 0.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-isvaliddurationrecord" type="abstract operation">
      <h1>
        IsValidDurationRecord (
          _record_: a Duration Record
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It returns *true* if _record_ represents a valid duration, and *false* otherwise.</dd>
      </dl>
      <emu-alg>
        1. Let _sign_ be DurationRecordSign(_record_).
        1. For each row of <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _valueSlot_ be the Value Slot value of the current row.
          1. Let _v_ be _record_.[[&lt;_valueSlot_&gt;]].
          1. Assert: ùîΩ(_v_) is finite.
          1. If _v_ &lt; 0 and _sign_ &gt; 0, return *false*.
          1. If _v_ &gt; 0 and _sign_ &lt; 0, return *false*.
        1. Return *true*.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-getdurationunitoptions" type="abstract operation">
      <h1>
        GetDurationUnitOptions (
          _unit_: a String,
          _options_: an ECMAScript language value,
          _baseStyle_: a String,
          _stylesList_: a List of String,
          _digitalBase_: a String,
          _prevStyle_: a String,
        ): either a normal completion containing a Record with [[Style]] and [[Display]] fields, or an abrupt completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It extracts the relevant options for any given _unit_ from an options bag and returns them as a Record.</dd>
      </dl>

      <emu-alg>
        1. Let _style_ be ? GetOption(_options_, _unit_, *"string"*, _stylesList_, *undefined*).
        1. Let _displayDefault_ be *"always"*.
        1. If _style_ is *undefined*, then
          1. If _baseStyle_ is *"digital"*, then
            1. If _unit_ is not one of *"hours"*, *"minutes"*, or *"seconds"*, then
              1. Set _displayDefault_ to *"auto"*.
            1. Set _style_ to _digitalBase_.
          1. Else,
            1. Set _displayDefault_ to *"auto"*.
            1. If _prevStyle_ is *"numeric"* or *"2-digit"*, then
              1. Set _style_ to *"numeric"*.
            1. Else,
              1. Set _style_ to _baseStyle_.
        1. Let _displayField_ be the string-concatenation of _unit_ and *"Display"*.
        1. Let _display_ be ? GetOption(_options_, _displayField_, *"string"*, &laquo; *"auto"*, *"always"* &raquo;, _displayDefault_).
        1. If _prevStyle_ is *"numeric"* or *"2-digit"*, then
          1. If _style_ is not *"numeric"* or *"2-digit"*, then
            1. Throw a *RangeError* exception.
          1. Else if _unit_ is *"minutes"* or *"seconds"*, then
            1. Set _style_ to *"2-digit"*.
        1. Return the Record {
          [[Style]]: _style_,
          [[Display]]: _display_
        }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitiondurationformatpattern" type="abstract operation">
      <h1>
        PartitionDurationFormatPattern (
          _durationFormat_: a DurationFormat,
          _duration_: a Duration Record,
        ): a List
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It creates and returns a List with all the corresponding parts according to the effective locale and the formatting options of _durationFormat_.</dd>
      </dl>

      <emu-alg>
        1. Let _result_ be a new empty List.
        1. Let _done_ be *false*.
        1. While _done_ is *false*, repeat for each row in <emu-xref href="#table-duration-components"></emu-xref> in order, except the header row:
          1. Let _styleSlot_ be the Style Slot value.
          1. Let _displaySlot_ be the Display Slot value.
          1. Let _valueSlot_ be the Value Slot value.
          1. Let _unit_ be the Unit value.
          1. Let _numberFormatUnit_ be the NumberFormat Unit value.
          1. Let _style_ be _durationFormat_.[[&lt;_styleSlot_&gt;]].
          1. Let _display_ be _durationFormat_.[[&lt;_displaySlot_&gt;]].
          1. Let _value_ be _duration_.[[&lt;_valueSlot_&gt;]].
          1. Let _nfOpts_ be OrdinaryObjectCreate(*null*).
          1. If _unit_ is *"seconds"*, *"milliseconds"*, or *"microseconds"*, then
            1. If _unit_ is *"seconds"*, then
              1. Let _nextStyle_ be _durationFormat_.[[MillisecondsStyle]].
            1. Else if _unit_ is *"milliseconds"*, then
              1. Let _nextStyle_ be _durationFormat_.[[MicrosecondsStyle]].
            1. Else,
              1. Let _nextStyle_ be _durationFormat_.[[NanosecondsStyle]].
            1. If _nextStyle_ is *"numeric"*, then
              1. If _unit_ is *"seconds"*, then
                1. Set _value_ to _value_ + _duration_.[[Milliseconds]] / 10<sup>3</sup> + _duration_.[[Microseconds]] / 10<sup>6</sup> + _duration_.[[Nanoseconds]] / 10<sup>9</sup>.
              1. Else if _unit_ is *"milliseconds"*, then
                1. Set _value_ to _value_ + _duration_.[[Microseconds]] / 10<sup>3</sup> + _duration_.[[Nanoseconds]] / 10<sup>6</sup>.
              1. Else,
                1. Set _value_ to _value_ + _duration_.[[Nanoseconds]] / 10<sup>3</sup>.
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"maximumFractionDigits"*, _durationFormat_.[[FractionalDigits]]).
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"minimumFractionDigits"*, _durationFormat_.[[FractionalDigits]]).
              1. Set _done_ to *true*.
          1. If _style_ is *"2-digit"*, then
            1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"minimumIntegerDigits"*, *2*<sub>ùîΩ</sub>).
          1. If _value_ is not 0 or _display_ is not *"auto"*, then
            1. If _style_ is *"2-digit"* or *"numeric"*, then
              1. Let _nf_ be ! Construct(%NumberFormat%, &laquo; _durationFormat_.[[Locale]], _nfOpts_ &raquo;).
              1. Let _dataLocale_ be _durationFormat_.[[DataLocale]].
              1. Let _dataLocaleData_ be %DurationFormat%.[[LocaleData]].[[&lt;_dataLocale_&gt;]].
              1. Let _num_ be ! FormatNumeric(_nf_, ùîΩ(_value_)).
              1. Append the new Record { [[Type]]: _unit_, [[Value]]: _num_} to the end of _result_.
              1. If _unit_ is *"hours"* or *"minutes"*, then
                1. If _unit_ is *"hours"*, then
                  1. Let _nextValue_ be _duration_.[[Minutes]].
                  1. Let _nextDisplay_ be _durationFormat_.[[MinutesDisplay]].
                1. Else,
                  1. Let _nextValue_ be _duration_.[[Seconds]].
                  1. Let _nextDisplay_ be _durationFormat_.[[SecondsDisplay]].
                  1. If _durationFormat_.[[MillisecondsStyle]] is *"numeric"*, then
                    1. Set _nextValue_ to _nextValue_ + _duration_.[[Milliseconds]] / 10<sup>3</sup> + _duration_.[[Microseconds]] / 10<sup>6</sup> + _duration_.[[Nanoseconds]] / 10<sup>9</sup>.
                1. If _nextValue_ is not 0 or _nextDisplay_ is not *"auto"*, then
                  1. Let _separator_ be _dataLocaleData_.[[digitalFormat]].[[separator]].
                  1. Append the new Record { [[Type]]: *"literal"*, [[Value]]: _separator_} to the end of _result_.
            1. Else,
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"style"*, *"unit"*).
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"unit"*, _numberFormatUnit_).
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, *"unitDisplay"*, _style_).
              1. Let _nf_ be ! Construct(%NumberFormat%, &laquo; _durationFormat_.[[Locale]], _nfOpts_ &raquo;).
              1. Let _parts_ be ! PartitionNumberPattern(_nf_, ùîΩ(_value_)).
              1. Let _concat_ be an empty String.
              1. For each Record { [[Type]], [[Value]], [[Unit]] } _part_ in _parts_, do
                1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Value]].
              1. Append the new Record { [[Type]]: _unit_, [[Value]]: _concat_ } to the end of _result_.
        1. Let _lfOpts_ be OrdinaryObjectCreate(*null*).
        1. Perform ! CreateDataPropertyOrThrow(_lfOpts_, *"type"*, *"unit"*).
        1. Let _listStyle_ be _durationFormat_.[[Style]].
        1. If _listStyle_ is *"digital"*, then
          1. Set _listStyle_ to *"short"*.
        1. Perform ! CreateDataPropertyOrThrow(_lfOpts_, *"style"*, _listStyle_).
        1. Let _lf_ be ! Construct(%ListFormat%, &laquo; _durationFormat_.[[Locale]], _lfOpts_ &raquo;).
        1. Set _result_ to ! CreatePartsFromList(_lf_, _result_).
        1. Return _result_.
      </emu-alg>

      <emu-note type="editor">
        In order to work, this needs all the necessary units be supported by *NumberFormat*, which is tracked in https://github.com/tc39/ecma402/issues/702 and https://github.com/tc39/ecma402/issues/704.
      </emu-note>
      <emu-note type="editor">
        CreatePartsFromList will be changed to accept a List of Records in the form {[[Type]], [[Value]]}.
      </emu-note>
      <emu-note type="editor">
        Adding the time separator as a separate list element is wrong, because it will be formatted as a single entry through the list formatter resulting in strings like *"12, :, 30, :, and 45"*.
      </emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-intl-durationformat-constructor">
    <h1>The Intl.DurationFormat Constructor</h1>

    <p>The DurationFormat constructor is the <dfn>%DurationFormat%</dfn> intrinsic object and a standard built-in property of the Intl object. Behaviour common to all service constructor properties of the Intl object is specified in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

    <emu-clause id="sec-Intl.DurationFormat">
      <h1>Intl.DurationFormat ( [ _locales_ [ , _options_ ] ] )</h1>

      <p>When the `Intl.DurationFormat` function is called with optional arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _durationFormat_ be ? OrdinaryCreateFromConstructor(NewTarget, *"%DurationFormatPrototype%"*, &laquo; [[InitializedDurationFormat]], [[Locale]], [[DataLocale]], [[NumberingSystem]], [[Style]], [[YearsStyle]], [[YearsDisplay]], [[MonthsStyle]], [[MonthsDisplay]] , [[WeeksStyle]], [[WeeksDisplay]] , [[DaysStyle]], [[DaysDisplay]] , [[HoursStyle]], [[HoursDisplay]] , [[MinutesStyle]], [[MinutesDisplay]] , [[SecondsStyle]], [[SecondsDisplay]] , [[MillisecondsStyle]], [[MillisecondsDisplay]] , [[MicrosecondsStyle]], [[MicrosecondsDisplay]] , [[NanosecondsStyle]], [[NanosecondsDisplay]], [[FractionalDigits]] &raquo;).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Let _options_ be ? GetOptionsObject(_options_).
        1. Let _matcher_ be ? GetOption(_options_, *"localeMatcher"*, *"string"*, &laquo; *"lookup"*, *"best fit"* &raquo;, *"best fit"*).
        1. Let _numberingSystem_ be ? GetOption(_options_, *"numberingSystem"*, *"string"*, *undefined*, *undefined*).
        1. If _numberingSystem_ is not *undefined*, then
          1. If _numberingSystem_ does not match the Unicode Locale Identifier `type` nonterminal, throw a *RangeError* exception.
        1. Let _opt_ be the Record { [[localeMatcher]]: _matcher_, [[nu]]: _numberingSystem_ }.
        1. Let _r_ be ResolveLocale(%DurationFormat%.[[AvailableLocales]], _requestedLocales_, _opt_, %DurationFormat%.[[RelevantExtensionKeys]], %DurationFormat%.[[LocaleData]]).
        1. Let _locale_ be r.[[locale]].
        1. Set _durationFormat_.[[Locale]] to _locale_.
        1. Set _durationFormat_.[[NumberingSystem]] to _r_.[[nu]].
        1. Let _style_ be ? GetOption(_options_, *"style"*, *"string"*, &laquo; *"long"*, *"short"*, *"narrow"*, *"digital"* &raquo;, *"short"*).
        1. Set _durationFormat_.[[Style]] to _style_.
        1. Set _durationFormat_.[[DataLocale]] to _r_.[[dataLocale]].
        1. Let _prevStyle_ be the empty String.
        1. For each row of <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _styleSlot_ be the Style Slot value of the current row.
          1. Let _displaySlot_ be the Display Slot value of the current row.
          1. Let _unit_ be the Unit value.
          1. Let _valueList_ be the Values value.
          1. Let _digitalBase_ be the Digital Default value.
          1. Let _unitOptions_ be ? GetDurationUnitOptions(_unit_, _options_, _style_, _valueList_, _digitalBase_, _prevStyle_).
          1. Set the value of the _styleSlot_ slot of _durationFormat_ to _unitOptions_.[[Style]].
          1. Set the value of the _displaySlot_ slot of _durationFormat_ to _unitOptions_.[[Display]].
          1. If _unit_ is one of *"hours"*, *"minutes"*, *"seconds"*, *"milliseconds"*, or *"microseconds"*, then
             1. Set _prevStyle_ to _unitOptions_.[[Style]].
        1. Set _durationFormat_.[[FractionalDigits]] to ? GetNumberOption(_options_, *"fractionalDigits"*, 0, 9, 0).
        1. Return _durationFormat_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-constructor">
    <h1>Properties of the Intl.DurationFormat Constructor</h1>

    <p>The Intl.DurationFormat constructor has the following properties:</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype">
      <h1>Intl.DurationFormat.prototype</h1>

      <p>The value of `Intl.DurationFormat.prototype` is %DurationFormatPrototype%.</p>

      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.supportedLocalesOf">
      <h1>Intl.DurationFormat.supportedLocalesOf ( _locales_ [ , _options_ ] )</h1>

      <p>When the `supportedLocalesOf` method is called with arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. Let _availableLocales_ be %DurationFormat%.[[AvailableLocales]].
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Return ? SupportedLocales(_availableLocales_, _requestedLocales_, _options_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat-internal-slots">
      <h1>Internal slots</h1>

      <p>The value of the [[AvailableLocales]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

      <p>The value of the [[RelevantExtensionKeys]] internal slot is &laquo; *"nu"* &raquo;.</p>

      <p>The value of the [[LocaleData]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref> and the following additional constraints for all locale values _locale_:</p>

      <ul>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[nu]] must be a List as specified in <emu-xref href="#sec-intl.numberformat-internal-slots"></emu-xref>.</li>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[digitalFormat]] must be record with just one field, [[separator]], which contains the appropriate time unit separator for that locale.</li>
      </ul>

      <emu-note>It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="http://cldr.unicode.org/">http://cldr.unicode.org/</a>).</emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-prototype-object">
    <h1>Properties of the Intl.DurationFormat Prototype Object</h1>

    <p>The Intl.DurationFormat prototype object is itself an ordinary object. <dfn>%DurationFormatPrototype%</dfn> is not an Intl.DurationFormat instance and does not have an [[InitializedDurationFormat]] internal slot or any of the other internal slots of Intl.DurationFormat instance objects.</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype.constructor">
      <h1>Intl.DurationFormat.prototype.constructor</h1>

      <p>The initial value of `Intl.DurationFormat.prototype.constructor` is the intrinsic object %DurationFormat%.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype-@@tostringtag">
      <h1>Intl.DurationFormat.prototype [ @@toStringTag ]</h1>

      <p>The initial value of the @@toStringTag property is the string value *"Intl.DurationFormat"*.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype.format">
      <h1>Intl.DurationFormat.prototype.format ( _duration_ )</h1>

      <p>When the `format` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToDurationRecord(_duration_).
        1. Let _parts_ be PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be a new empty String.
        1. For each Record { [[Type]], [[Value]] } _part_ in _parts_, do
          1. Set _result_ to the string-concatenation of _result_ and _part_.[[Value]].
        1. Return _result_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.formatToParts">
      <h1>Intl.DurationFormat.prototype.formatToParts ( _duration_ )</h1>

      <p>When the `formatToParts` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToDurationRecord(_duration_).
        1. Let _parts_ be PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be ! ArrayCreate(0).
        1. Let _n_ be 0.
        1. For each { [[Type]], [[Value]] } _part_ in _parts_, do
          1. Let _obj_ be OrdinaryObjectCreate(%ObjectPrototype%).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, *"type"*, _part_.[[Type]]).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, *"value"*, _part_.[[Value]]).
          1. Perform ! CreateDataPropertyOrThrow(_result_, ! ToString(_n_), _obj_).
          1. Increment _n_ by 1.
        1. Return _result_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.resolvedOptions">
      <h1>Intl.DurationFormat.prototype.resolvedOptions ( )</h1>

      <p>This function provides access to the locale and options computed during initialization of the object.</p>

      <emu-alg>
        1. Let _df_ be the *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _options_ be OrdinaryObjectCreate(%ObjectPrototype%).
        1. For each row of <emu-xref href="#table-durationformat-resolvedoptions-properties"></emu-xref>, except the header row, in table order, do
          1. Let _p_ be the Property value of the current row.
          1. Let _v_ be the value of _df_'s internal slot whose name is the Internal Slot value of the current row.
          1. Assert: _v_ is not *undefined*.
          1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-durationformat-resolvedoptions-properties">
        <emu-caption>Resolved Options of DurationFormat Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Locale]]</td>
            <td>*"locale"*</td>
          </tr>
          <tr>
            <td>[[Style]]</td>
            <td>*"style"*</td>
          </tr>
          <tr>
            <td>[[YearsStyle]]</td>
            <td>*"years"*</td>
          </tr>
          <tr>
            <td>[[YearsDisplay]]</td>
            <td>*"yearsDisplay"*</td>
          </tr>
          <tr>
            <td>[[MonthsStyle]]</td>
            <td>*"months"*</td>
          </tr>
          <tr>
            <td>[[MonthsDisplay]]</td>
            <td>*"monthsDisplay"*</td>
          </tr>
          <tr>
            <td>[[WeeksStyle]]</td>
            <td>*"weeks"*</td>
          </tr>
          <tr>
            <td>[[WeeksDisplay]]</td>
            <td>*"weeksDisplay"*</td>
          </tr>
          <tr>
            <td>[[DaysStyle]]</td>
            <td>*"days"*</td>
          </tr>
          <tr>
            <td>[[DaysDisplay]]</td>
            <td>*"daysDisplay"*</td>
          </tr>
          <tr>
            <td>[[HoursStyle]]</td>
            <td>*"hours"*</td>
          </tr>
          <tr>
            <td>[[HoursDisplay]]</td>
            <td>*"hoursDisplay"*</td>
          </tr>
          <tr>
            <td>[[MinutesStyle]]</td>
            <td>*"minutes"*</td>
          </tr>
          <tr>
            <td>[[MinutesDisplay]]</td>
            <td>*"minutesDisplay"*</td>
          </tr>
          <tr>
            <td>[[SecondsStyle]]</td>
            <td>*"seconds"*</td>
          </tr>
          <tr>
            <td>[[SecondsDisplay]]</td>
            <td>*"secondsDisplay"*</td>
          </tr>
          <tr>
            <td>[[MillisecondsStyle]]</td>
            <td>*"milliseconds"*</td>
          </tr>
          <tr>
            <td>[[MillisecondsDisplay]]</td>
            <td>*"millisecondsDisplay"*</td>
          </tr>
          <tr>
            <td>[[MicrosecondsStyle]]</td>
            <td>*"microseconds"*</td>
          </tr>
          <tr>
            <td>[[MicrosecondsDisplay]]</td>
            <td>*"microsecondsDisplay"*</td>
          </tr>
          <tr>
            <td>[[NanosecondsStyle]]</td>
            <td>*"nanoseconds"*</td>
          </tr>
          <tr>
            <td>[[NanosecondsDisplay]]</td>
            <td>*"nanosecondsDisplay"*</td>
          </tr>
          <tr>
            <td>[[FractionalDigits]]</td>
            <td>*"fractionalDigits"*</td>
          </tr>
          <tr>
            <td>[[NumberingSystem]]</td>
            <td>*"numberingSystem"*</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-instances">
    <h1>Properties of Intl.DurationFormat Instances</h1>

    <p>Intl.DurationFormat instances inherit properties from %DurationFormatPrototype%.</p>

    <p>Intl.DurationFormat instances have an [[InitializedDurationFormat]] internal slot.</p>

    <p>Intl.DurationFormat instances also have several internal slots that are computed by the constructor:</p>

    <ul>
      <li>[[Locale]] is a String value with the language tag of the locale whose localization is used for formatting.</li>
      <li>[[DataLocale]] is a String value with the language tag of the nearest locale for which the implementation has data to perform the formatting operation. It will be a parent locale of [[Locale]].</li>
      <li>[[NumberingSystem]] is a String value with the *"type"* given in Unicode Technical Standard 35 for the numbering system used for formatting.</li>
      <li>[[Style]] is one of the String values *"long"*, *"short"*, *"narrow"*, or *"digital"* identifying the duration formatting style used.</li>
      <li>[[YearsStyle]] is one of the String values *"long"*, *"short"*, or *"narrow"* identifying the formatting style used for the years field.</li>
      <li>[[YearsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the years field.</li>
      <li>[[MonthsStyle]] is one of the String values *"long"*, *"short"*, or *"narrow"* identifying the formatting style used for the months field.</li>
      <li>[[MonthsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the months field.</li>
      <li>[[WeeksStyle]] is one of the String values *"long"*, *"short"*, or *"narrow"* identifying the formatting style used for the weeks field.</li>
      <li>[[WeeksDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the weeks field.</li>
      <li>[[DaysStyle]] is one of the String values *"long"*, *"short"*, or *"narrow"* identifying the formatting style used for the days field.</li>
      <li>[[DaysDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the days field.</li>
      <li>[[HoursStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, *"2-digit"*, or *"numeric"* identifying the formatting style used for the hours field.</li>
      <li>[[HoursDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the hours field.</li>
      <li>[[MinutesStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, *"2-digit"*, or *"numeric"* identifying the formatting style used for the minutes field.</li>
      <li>[[MinutesDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the minutes field.</li>
      <li>[[SecondsStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, *"2-digit"*, or *"numeric"* identifying the formatting style used for the seconds field.</li>
      <li>[[SecondsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the seconds field.</li>
      <li>[[MillisecondsStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, or *"numeric"* identifying the formatting style used for the milliseconds field.</li>
      <li>[[MillisecondsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the milliseconds field.</li>
      <li>[[MicrosecondsStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, or *"numeric"* identifying the formatting style used for the microseconds field.</li>
      <li>[[MicrosecondsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the microseconds field.</li>
      <li>[[NanosecondsStyle]] is one of the String values *"long"*, *"short"*, *"narrow"*, or *"numeric"* identifying the formatting style used for the nanoseconds field.</li>
      <li>[[NanosecondsDisplay]] is one of the String values *"auto"* or *"always"* identifying when to display the nanoseconds field.</li>
      <li>[[FractionalDigits]] is a Number value, identifying the number of fractional digits to be used with numeric styles.</li>
    </ul>
  </emu-clause>
</emu-clause>
