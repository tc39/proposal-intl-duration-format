<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Intl.DurationFormat
stage: 3
location: https://tc39.es/proposal-intl-duration-format/
contributors: Ujjwal Sharma, Younies Mahmoud
</pre>
<emu-biblio href="./biblio.json"></emu-biblio>
<emu-clause id="durationformat-objects">
  <h1>DurationFormat Objects</h1>

  <emu-clause id="sec-intl-durationformat-abstracts">
    <h1>Abstract Operations for DurationFormat Objects</h1>

    <p>Several DurationFormat algorithms use values from the following table, which provides internal slots and property names for Duration instances, and which is also used to key Records of templates to format individual Duration components:</p>

    <emu-table id="table-duration-components">
      <emu-caption>Components of Duration Instances</emu-caption>
      <table class="real-table">
        <thead>
          <tr>
            <th>Value Slot</th>
            <th>Style Slot</th>
            <th>Display Slot</th>
            <th>Unit</th>
            <th>Values</th>
            <th>Digital Default</th>
          </tr>
        </thead>
        <tr>
          <td>[[Years]]</td>
          <td>[[YearsStyle]]</td>
          <td>[[YearsDisplay]]</td>
          <td>`"years"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"` &raquo;</td>
          <td>`"narrow"`</td>
        </tr>
        <tr>
          <td>[[Months]]</td>
          <td>[[MonthsStyle]]</td>
          <td>[[MonthsDisplay]]</td>
          <td>`"months"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"` &raquo;</td>
          <td>`"narrow"`</td>
        </tr>
        <tr>
          <td>[[Weeks]]</td>
          <td>[[WeeksStyle]]</td>
          <td>[[WeeksDisplay]]</td>
          <td>`"weeks"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"` &raquo;</td>
          <td>`"narrow"`</td>
        </tr>
        <tr>
          <td>[[Days]]</td>
          <td>[[DaysStyle]]</td>
          <td>[[DaysDisplay]]</td>
          <td>`"days"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"` &raquo;</td>
          <td>`"narrow"`</td>
        </tr>
        <tr>
          <td>[[Hours]]</td>
          <td>[[HoursStyle]]</td>
          <td>[[HoursDisplay]]</td>
          <td>`"hours"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"`, `"2-digit"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
        <tr>
          <td>[[Minutes]]</td>
          <td>[[MinutesStyle]]</td>
          <td>[[MinutesDisplay]]</td>
          <td>`"minutes"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"`, `"2-digit"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
        <tr>
          <td>[[Seconds]]</td>
          <td>[[SecondsStyle]]</td>
          <td>[[SecondsDisplay]]</td>
          <td>`"seconds"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"`, `"2-digit"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
        <tr>
          <td>[[Milliseconds]]</td>
          <td>[[MillisecondsStyle]]</td>
          <td>[[MillisecondsDisplay]]</td>
          <td>`"milliseconds"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
        <tr>
          <td>[[Microseconds]]</td>
          <td>[[MicrosecondsStyle]]</td>
          <td>[[MicrosecondsDisplay]]</td>
          <td>`"microseconds"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
        <tr>
          <td>[[Nanoseconds]]</td>
          <td>[[NanosecondsStyle]]</td>
          <td>[[NanosecondsDisplay]]</td>
          <td>`"nanoseconds"`</td>
          <td>&laquo; `"long"`, `"short"`, `"narrow"`, `"numeric"` &raquo;</td>
          <td>`"numeric"`</td>
        </tr>
      </table>
    </emu-table>

    <emu-clause id="sec-getunitoptions" type="abstract operation">
      <h1>
        GetUnitOptions (
          _unit_: a String,
          _options_: an ECMAScript language value,
          _baseStyle_: a String,
          _stylesList_: a List of String,
          _digitalBase_: a String,
          _prevStyle_: a String,
        ): a Record with [[Style]] and [[Display]] fields
      </h1>
      <dl class="header">
      </dl>

      <emu-alg>
        1. Let _style_ be ? GetOption(_options_, _unit_, `"string"`, _stylesList_, *undefined*).
        1. Let _displayDefault_ be `"always"`.
        1. If _style_ is *undefined*, then
          1. Set _displayDefault_ to `"auto"`.
          1. If _baseStyle_ is `"digital"`, then
            1. Set _style_ to _digitalBase_.
          1. Else,
            1. Set _style_ to _baseStyle_.
        1. Let _displayField_ be the string-concatenation of _unit_ and `"Display"`.
        1. Let _display_ be ? GetOption(_options_, _displayField_, `"string"`, &laquo; `"auto"`, `"always"` &raquo;, _displayDefault_).
        1. If _prevStyle_ is `"numeric` or `"2-digit`, then
          1. If _style_ is not `"numeric` or `"2-digit"`, then
            1. Throw a *RangeError* exception.
          1. Else if _unit_ is `"minutes"` or `"seconds"`, then
            1. Set _style_ to `"2-digit"`.
        1. Return the Record {
          [[Style]]: _style_,
          [[Display]]: _display_
        }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitiondurationformatpattern" aoid="PartitionDurationFormatPattern">
      <h1>PartitionDurationFormatPattern ( _durationFormat_, _duration_ )</h1>

      <p>The PartitionDurationFormatPattern abstract operation is called with the arguments _durationFormat_ (which must be an object initialized as a DurationFormat) and _duration_ (which must be a Record with the fields enumerated in <emu-xref href="#table-duration-components"></emu-xref>), and creates the corresponding parts according to the effective locale and the formatting options of _durationFormat_. The following steps are taken:</p>

      <emu-alg>
        1. Let _result_ be a new empty List.
        1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _styleSlot_ be the Style Slot value.
          1. Let _nextStyleSlot_ be the Style Slot value of the next row.
          1. Let _displaySlot_ be the Display Slot value.
          1. Let _valueSlot_ be the Value Slot value.
          1. Let _unit_ be the Unit value.
          1. Let _style_ be _durationFormat_.[[&lt;_styleSlot_&gt;]].
          1. Let _nextStyle_ be _durationFormat_[[&lt;_nextStyleSlot_&gt;]].
          1. Let _nfOpts_ be ! OrdinaryObjectCreate(`null`).
          1. Let _value_ be `0`.
          1. Let _done_ be `false`.
          1. If _unit_ is `"seconds"`, `"milliseconds"` or `"microseconds"` and _nextStyle_ is `"numeric"`, then
              1. Set _value_ to _duration_.[[Microseconds]] + _duration_.[[Nanoseconds]] / 1000.
              1. If _unit_ is `"seconds"` or `"milliseconds"`, then
                1. Set _value_ to _duration_.[[Milliseconds]] + _value_ / 1000.
                1. If _unit_ is `"seconds"`, then
                  1. Set _value_ to _duration_.[[Seconds]] + _value_ / 1000.
              1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, `"maximumFractionDigits"`, _durationFormat_.[[FractionalDigits]]).
              1. Set _done_ to `true`.
          1. Else,
            1. Set _value_ to _duration_.[[&lt;_valueSlot_&gt;]].
          1. If _style_ is `"2-digit"`, then
            1. Perform ! CreateDataPropertyOrThrow(_nfOpts_, `"minimumIntegerDigits"`, `2`).
          1. If _value_ is `0` or `-0` and _display_ is `"auto"`, then
            1. Skip to the next iteration.
          1. Let _nf_ be ? Construct(%NumberFormat%, &laquo; _durationFormat_.[[Locale]], _nfOpts_ &raquo;).
          1. Let _num_ be ! FormatNumeric(_durationFormat_.[[NumberFormat]], _value_).
          1. Let _dataLocale_ be _durationFormat_.[[DataLocale]].
          1. Let _dataLocaleData_ be %DurationFormat%.[[LocaleData]].[[&lt;_dataLocale_&gt;]].
          1. If _style_ is `"2-digit"` or `"numeric"`, then
            1. Append the new Record { [[Type]]: _unit_, [[Value]]: _num_} to the end of _result_.
            1. If _unit_ is `"hours"` or `"minutes"`, then
              1. Let _separator_ be _dataLocaleData_.[[formats]].[[digital]].[[separator]].
              1. Append the new Record { [[Type]]: `"literal"`, [[Value]]: _separator_} to the end of _result_.
          1. Else,
            1. Let _pr_ be ? Construct(%PluralRules%, &laquo; _durationFormat_.[[Locale]] &raquo;).
            1. Let _prv_ be ! ResolvePlural(_pr_, _value_).
            1. Let _template_ be _dataLocaleData_.[[formats]].[[&lt;_style_&gt;]].[[&lt;_unit_&gt;]].[[&lt;_prv_&gt;]].
            1. Let _parts_ be ! MakePartsList(_template_, _unit_, _num_).
            1. Let _concat_ be an empty String.
            1. For each element _part_ in _parts_, in List order, do
              1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Value]].
              1. If _part_ has a [[Unit]] field, then
                1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Unit]].
            1. Append the new Record { [[Type]]: _unit_, [[Value]]: _concat_ } to the end of _result_.
          1. If _done_ is `true`, then
            1. Stop iteration.
        1. Let _lf_ be ? Construct(%ListFormat%, &laquo; _durationFormat_.[[Locale]] &raquo;).
        1. Set _result_ to ! CreatePartsFromList(_lf_, _result_).
        1. Return _result_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-temporal-abstracts">
    <h1>Abstract Operations from Temporal relevant for DurationFormat Objects</h1>

    <emu-clause id="sec-temporal-totemporaldurationrecord" type="abstract operation">
      <h1>
        ToTemporalDurationRecord (
          _temporalDurationLike_: an ECMAScript language value,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It converts _temporalDurationLike_ to a Duration Record and returns it.</dd>
      </dl>
      <emu-alg>
        1. If Type(_temporalDurationLike_) is not Object, then
          1. Let _string_ be ? ToString(_temporalDurationLike_).
          1. Return ? ParseTemporalDurationString(_string_).
        1. If _temporalDurationLike_ has an [[InitializedTemporalDuration]] internal slot, then
          1. Return ! CreateDurationRecord(_temporalDurationLike_.[[Years]], _temporalDurationLike_.[[Months]], _temporalDurationLike_.[[Weeks]], _temporalDurationLike_.[[Days]], _temporalDurationLike_.[[Hours]], _temporalDurationLike_.[[Minutes]], _temporalDurationLike_.[[Seconds]], _temporalDurationLike_.[[Milliseconds]], _temporalDurationLike_.[[Microseconds]], _temporalDurationLike_.[[Nanoseconds]]).
        1. Let _result_ be a new Duration Record.
        1. Let _any_ be *false*.
        1. For each row of <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _prop_ be the Property Name value of the current row.
          1. Let _val_ be ? Get(_temporalDurationLike_, _prop_).
          1. If _val_ is *undefined*, then
            1. Set _result_'s field whose name is the Field Name value of the current row to 0.
          1. Else,
            1. Set _any_ to *true*.
            1. Let _val_ be ? ToIntegerWithoutRounding(_val_).
            1. Set _result_'s field whose name is the Field Name value of the current row to _val_.
        1. If _any_ is *false*, then
          1. Throw a *TypeError* exception.
        1. If ! IsValidDuration(_result_.[[Years]], _result_.[[Months]], _result_.[[Weeks]] _result_.[[Days]], _result_.[[Hours]], _result_.[[Minutes]], _result_.[[Seconds]], _result_.[[Milliseconds]], _result_.[[Microseconds]], _result_.[[Nanoseconds]]) is *false*, then
          1. Throw a *RangeError* exception.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-temporal-isvalidduration" type="abstract operation">
      <h1>
        IsValidDuration (
          _years_: an integer,
          _months_: an integer,
          _weeks_: an integer,
          _days_: an integer,
          _hours_: an integer,
          _minutes_: an integer,
          _seconds_: an integer,
          _milliseconds_: an integer,
          _microseconds_: an integer,
          _nanoseconds_: an integer,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It returns *true* if its arguments form valid input from which to construct a `Temporal.Duration`, and *false* otherwise.</dd>
      </dl>
      <emu-alg>
        1. Let _sign_ be ! DurationSign(_years_, _months_, _weeks_, _days_, _hours_, _minutes_, _seconds_, _milliseconds_, _microseconds_, _nanoseconds_).
        1. For each value _v_ of « _years_, _months_, _weeks_, _days_, _hours_, _minutes_, _seconds_, _milliseconds_, _microseconds_, _nanoseconds_ », do
          1. If 𝔽(_v_) is not finite, return *false*.
          1. If _v_ &lt; 0 and _sign_ &gt; 0, return *false*.
          1. If _v_ &gt; 0 and _sign_ &lt; 0, return *false*.
        1. Return *true*.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-temporal-durationsign" type="abstract operation">
      <h1>
        DurationSign (
          _years_: an integer,
          _months_: an integer,
          _weeks_: an integer,
          _days_: an integer,
          _hours_: an integer,
          _minutes_: an integer,
          _seconds_: an integer,
          _milliseconds_: an integer,
          _microseconds_: an integer,
          _nanoseconds_: an integer,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It returns 1 if the most significant non-zero element in its arguments is positive, and −1 if the most significant non-zero element is negative. If all of its arguments are zero, it returns 0.</dd>
      </dl>
      <emu-alg>
        1. For each value _v_ of « _years_, _months_, _weeks_, _days_, _hours_, _minutes_, _seconds_, _milliseconds_, _microseconds_, _nanoseconds_ », do
          1. If _v_ &lt; 0, return −1.
          1. If _v_ &gt; 0, return 1.
        1. Return 0.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-temporal-tointegerwithoutrounding" type="abstract operation">
      <h1>
        ToIntegerWithoutRounding (
          _argument_: an ECMAScript language value,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It converts _argument_ to an integer, throwing if doing so would require rounding.</dd>
      </dl>
      <emu-alg>
        1. Let _number_ be ? ToNumber(_argument_).
        1. If _number_ is *NaN*, *+0*<sub>𝔽</sub>, or *−0*<sub>𝔽</sub> return 0.
        1. If IsIntegralNumber(_number_) is *false*, throw a *RangeError* exception.
        1. Return ℝ(_number_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-temporal-createdurationrecord" type="abstract operation">
      <h1>
        CreateDurationRecord (
          _years_: an integer,
          _months_: an integer,
          _weeks_: an integer,
          _days_: an integer,
          _hours_: an integer,
          _minutes_: an integer,
          _seconds_: an integer,
          _milliseconds_: an integer,
          _microseconds_: an integer,
          _nanoseconds_: an integer,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It returns a Duration Record.</dd>
      </dl>
      <emu-alg>
        1. If ! IsValidDuration(_years_, _months_, _weeks_, _days_, _hours_, _minutes_, _seconds_, _milliseconds_, _microseconds_, _nanoseconds_) is *false*, throw a *RangeError* exception.
        1. Return the Record {
            [[Years]]: ℝ(𝔽(_years_)),
            [[Months]]: ℝ(𝔽(_months_)),
            [[Weeks]]: ℝ(𝔽(_weeks_)),
            [[Days]]: ℝ(𝔽(_days_)),
            [[Hours]]: ℝ(𝔽(_hours_)),
            [[Minutes]]: ℝ(𝔽(_minutes_)),
            [[Seconds]]: ℝ(𝔽(_seconds_)),
            [[Milliseconds]]: ℝ(𝔽(_milliseconds_)),
            [[Microseconds]]: ℝ(𝔽(_microseconds_)),
            [[Nanoseconds]]: ℝ(𝔽(_nanoseconds_))
          }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-literals-numeric-literals">
      <h1><a href="https://tc39.es/ecma262/#sec-literals-numeric-literals">Numeric Literals</a></h1>
      <emu-note type="editor">
        <p>
          No changes, but these productions must be present for symbol references because biblio.json contents are not propagated to grammarkdown.
        </p>
      </emu-note>
      <emu-grammar type="definition">
        NumericLiteralSeparator ::
          `_`

        DecimalDigits[Sep] ::
          DecimalDigit
          DecimalDigits[?Sep] DecimalDigit
          [+Sep] DecimalDigits[+Sep] NumericLiteralSeparator DecimalDigit

        DecimalDigit :: one of
          `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

        NonZeroDigit :: one of
          `1` `2` `3` `4` `5` `6` `7` `8` `9`
      </emu-grammar>
    </emu-clause>

    <emu-clause id="sec-temporal-iso8601grammar">
      <h1>ISO 8601 grammar</h1>
      <p>
        Several operations in this section are intended to parse ISO 8601 strings representing a date, a time, a duration, or a combined date and time.
        For the purposes of these operations, a valid ISO 8601 string is defined as a string that can be generated by one of the goal elements of the following grammar.
      </p>
      <p>
        This grammar is adapted from the ABNF grammar of ISO 8601 that is given in section 5.8 of <a href="https://ryzokuken.dev/draft-ryzokuken-datetime-extended/documents/rfc-3339.html#name-internet-date-time-format">Date and Time on the Internet: Timestamps with additional information</a>, a draft update to <a href="https://tools.ietf.org/html/rfc3339#appendix-A">RFC 3339</a>.
      </p>
      <p>
        The grammar deviates from the standard given in ISO 8601 in the following ways:
      </p>
      <ul>
        <li>Only the calendar date format is supported, not the weekdate or ordinal date format.</li>
        <li>Two-digit years are disallowed.</li>
        <li><a href="https://tc39.es/ecma262/#sec-expanded-years">Expanded Years</a> of 6 digits are allowed.</li>
        <li>Fractional parts may have 1 through 9 decimal places.</li>
        <li>In time representations, only seconds are allowed to have a fractional part.</li>
        <li>In duration representations, only hours, minutes, and seconds are allowed to have a fractional part.</li>
        <li>The time zone may be given by a suffixed <a href="https://www.iana.org/time-zones">IANA time zone name</a> in square brackets, instead of or in addition to a UTC offset.</li>
        <li>The calendar may be given by a suffixed <a href="https://tools.ietf.org/html/bcp47#section-2.1">BCP 47 key</a> in square brackets.</li>
        <li>A space may be used to separate the date and time in a combined date / time representation, but not in a duration.</li>
        <li>Alphabetic designators may be in lower or upper case.</li>
        <li>Period or comma may be used as the decimal separator.</li>
        <li>A time zone offset of *"-00:00"* is allowed, and means the same thing as *"+00:00"*.</li>
        <li>
          In a combined representation, combinations of date, time, and time zone offset with Basic (no `-` or `:` separators) and Extended (with `-` or `:` separators) formatting are allowed.
          (The date, time, and time zone offset must each be fully in Basic format or Extended format.)
        </li>
        <li>
          When parsing a date representation for a Temporal.PlainMonthDay, the year may be omitted.
          The year may optionally be replaced by *"--"* as in RFC 3339.
        </li>
        <li>When parsing a date representation without a day for a Temporal.PlainYearMonth, the expression is allowed to be in Basic format.</li>
        <li>A duration specifier of *"W"* (weeks) can be combined with any of the other specifiers.</li>
        <li>Anything else described by the standard as requiring mutual agreement between communicating parties, is disallowed.</li>
      </ul>

      <emu-grammar type="definition">
        Alpha : one of
            `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
            `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
            `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
            `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`

        ASCIISign : one of
            `+` `-`

        Sign :
            ASCIISign
            U+2212

        UnpaddedHour :
            DecimalDigit
            `1` DecimalDigit
            `20`
            `21`
            `22`
            `23`

        Hour :
            `0` DecimalDigit
            `1` DecimalDigit
            `20`
            `21`
            `22`
            `23`

        MinuteSecond :
            `0` DecimalDigit
            `1` DecimalDigit
            `2` DecimalDigit
            `3` DecimalDigit
            `4` DecimalDigit
            `5` DecimalDigit

        DecimalSeparator : one of
            `.` `,`

        DaysDesignator : one of
            `D` `d`

        HoursDesignator : one of
            `H` `h`

        MinutesDesignator : one of
            `M` `m`

        MonthsDesignator : one of
            `M` `m`

        DurationDesignator : one of
            `P` `p`

        SecondsDesignator : one of
            `S` `s`

        DateTimeSeparator :
            &lt;SP&gt;
            `T`
            `t`

        TimeDesignator : one of
            `T` `t`

        WeeksDesignator : one of
            `W` `w`

        YearsDesignator : one of
            `Y` `y`

        UTCDesignator : one of
            `Z` `z`

        DateFourDigitYear :
            DecimalDigit DecimalDigit DecimalDigit DecimalDigit

        DateExtendedYear :
            Sign DecimalDigit DecimalDigit DecimalDigit DecimalDigit DecimalDigit DecimalDigit

        DateYear :
            DateFourDigitYear
            DateExtendedYear

        DateMonth :
            `0` NonZeroDigit
            `10`
            `11`
            `12`

        DateDay :
            `0` NonZeroDigit
            `1` DecimalDigit
            `2` DecimalDigit
            `30`
            `31`

        DateSpecYearMonth :
            DateYear `-`? DateMonth

        TwoDashes :
            `--`
        DateSpecMonthDay :
            TwoDashes? DateMonth `-`? DateDay

        Date :
            DateYear `-` DateMonth `-` DateDay
            DateYear DateMonth DateDay

        TimeHour :
            Hour

        TimeMinute :
            MinuteSecond

        TimeSecond :
            MinuteSecond
            `60`

        TimeHourNotValidMonth : one of
            `00` `13` `14` `15` `16` `17` `18` `19` `20` `21` `23`

        TimeHourNotThirtyOneDayMonth : one of
            `02` `04` `06` `09` `11`

        TimeHourTwoOnly :
            `02`

        TimeMinuteNotValidDay :
            `00`
            `32`
            `33`
            `34`
            `35`
            `36`
            `37`
            `38`
            `39`
            `4` DecimalDigit
            `5` DecimalDigit
            `60`

        TimeMinuteThirtyOnly :
            `30`

        TimeMinuteThirtyOneOnly :
            `31`

        TimeSecondNotValidMonth :
            `00`
            `13`
            `14`
            `15`
            `16`
            `17`
            `18`
            `19`
            `2` DecimalDigit
            `3` DecimalDigit
            `4` DecimalDigit
            `5` DecimalDigit
            `60`

        FractionalPart :
            DecimalDigit DecimalDigit? DecimalDigit? DecimalDigit? DecimalDigit? DecimalDigit? DecimalDigit? DecimalDigit? DecimalDigit?

        Fraction :
            DecimalSeparator FractionalPart

        TimeFraction :
            Fraction

        TimeZoneUTCOffsetSign :
            Sign

        TimeZoneUTCOffsetHour :
            Hour

        TimeZoneUTCOffsetMinute :
            MinuteSecond

        TimeZoneUTCOffsetSecond :
            MinuteSecond

        TimeZoneUTCOffsetFractionalPart:
            FractionalPart

        TimeZoneUTCOffsetFraction :
            DecimalSeparator TimeZoneUTCOffsetFractionalPart

        TimeZoneNumericUTCOffset :
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour `:` TimeZoneUTCOffsetMinute
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour TimeZoneUTCOffsetMinute
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour `:` TimeZoneUTCOffsetMinute `:` TimeZoneUTCOffsetSecond TimeZoneUTCOffsetFraction?
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour TimeZoneUTCOffsetMinute TimeZoneUTCOffsetSecond TimeZoneUTCOffsetFraction?

        TimeZoneUTCOffset :
            TimeZoneNumericUTCOffset
            UTCDesignator

        TimeZoneNumericUTCOffsetNotAmbiguous :
            `+` TimeZoneUTCOffsetHour
            U+2212 TimeZoneUTCOffsetHour
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour `:` TimeZoneUTCOffsetMinute
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour TimeZoneUTCOffsetMinute
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour `:` TimeZoneUTCOffsetMinute `:` TimeZoneUTCOffsetSecond TimeZoneUTCOffsetFraction?
            TimeZoneUTCOffsetSign TimeZoneUTCOffsetHour TimeZoneUTCOffsetMinute TimeZoneUTCOffsetSecond TimeZoneUTCOffsetFraction?

        TimeZoneNumericUTCOffsetNotAmbiguousAllowedNegativeHour :
            TimeZoneNumericUTCOffsetNotAmbiguous
            `-` TimeHourNotValidMonth

        TimeZoneUTCOffsetName :
            Sign Hour
            Sign Hour `:` MinuteSecond
            Sign Hour MinuteSecond
            Sign Hour `:` MinuteSecond `:` MinuteSecond Fraction?
            Sign Hour MinuteSecond MinuteSecond Fraction?

        TZLeadingChar :
            Alpha
            `.`
            `_`

        TZChar :
            Alpha
            `.`
            `-`
            `_`

        TimeZoneIANANameComponent :
            TZLeadingChar TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? TZChar? but not one of `.` or `..`

        TimeZoneIANANameTail :
            TimeZoneIANANameComponent
            TimeZoneIANANameComponent `/` TimeZoneIANANameTail

        TimeZoneIANAName :
            `Etc/GMT` ASCIISign UnpaddedHour
            TimeZoneIANANameTail but not `Etc/GMT` ASCIISign UnpaddedHour

        TimeZoneBracketedName :
            TimeZoneIANAName
            TimeZoneUTCOffsetName

        TimeZoneBracketedAnnotation :
            `[` TimeZoneBracketedName `]`

        TimeZoneOffsetRequired :
            TimeZoneUTCOffset TimeZoneBracketedAnnotation?

        TimeZoneNameRequired :
            TimeZoneUTCOffset? TimeZoneBracketedAnnotation

        TimeZone :
            TimeZoneUTCOffset TimeZoneBracketedAnnotation?
            TimeZoneBracketedAnnotation

        CalChar :
            Alpha
            DecimalDigit

        CalendarNameComponent :
            CalChar CalChar CalChar CalChar? CalChar? CalChar? CalChar? CalChar?

        CalendarNameTail :
            CalendarNameComponent
            CalendarNameComponent `-` CalendarNameTail

        CalendarName :
            CalendarNameTail

        Calendar :
            `[u-ca=` CalendarName `]`

        TimeSpec :
            TimeHour
            TimeHour `:` TimeMinute
            TimeHour TimeMinute
            TimeHour `:` TimeMinute `:` TimeSecond TimeFraction?
            TimeHour TimeMinute TimeSecond TimeFraction?

        TimeHourMinuteBasicFormatNotAmbiguous :
            TimeHourNotValidMonth TimeMinute
            TimeHour TimeMinuteNotValidDay
            TimeHourNotThirtyOneDayMonth TimeMinuteThirtyOneOnly
            TimeHourTwoOnly TimeMinuteThirtyOnly

        TimeSpecWithOptionalTimeZoneNotAmbiguous :
            TimeHour TimeZoneNumericUTCOffsetNotAmbiguous? TimeZoneBracketedAnnotation?
            TimeHourNotValidMonth TimeZone
            TimeHour `:` TimeMinute TimeZone?
            TimeHourMinuteBasicFormatNotAmbiguous TimeZoneBracketedAnnotation?
            TimeHour TimeMinute TimeZoneNumericUTCOffsetNotAmbiguousAllowedNegativeHour TimeZoneBracketedAnnotation?
            TimeHour `:` TimeMinute `:` TimeSecond TimeFraction? TimeZone?
            TimeHour TimeMinute TimeSecondNotValidMonth TimeZone?
            TimeHour TimeMinute TimeSecond TimeFraction TimeZone?

        TimeSpecSeparator :
            DateTimeSeparator TimeSpec

        DateTime :
            Date TimeSpecSeparator? TimeZone?

        CalendarDate :
            Date Calendar?

        CalendarTime :
            TimeDesignator TimeSpec TimeZone? Calendar?
            TimeSpec TimeZone? Calendar
            TimeSpecWithOptionalTimeZoneNotAmbiguous

        CalendarDateTime:
            DateTime Calendar?

        CalendarDateTimeTimeRequired :
            Date TimeSpecSeparator TimeZone? Calendar?

        DurationWholeSeconds :
            DecimalDigits[~Sep]

        DurationSecondsFraction :
            TimeFraction

        DurationSecondsPart :
            DurationWholeSeconds DurationSecondsFraction? SecondsDesignator

        DurationWholeMinutes :
            DecimalDigits[~Sep]

        DurationMinutesFraction :
            TimeFraction

        DurationMinutesPart :
            DurationWholeMinutes DurationMinutesFraction? MinutesDesignator DurationSecondsPart?

        DurationWholeHours :
            DecimalDigits[~Sep]

        DurationHoursFraction :
            TimeFraction

        DurationHoursPart :
            DurationWholeHours DurationHoursFraction? HoursDesignator DurationMinutesPart
            DurationWholeHours DurationHoursFraction? HoursDesignator DurationSecondsPart?

        DurationTime :
            TimeDesignator DurationHoursPart
            TimeDesignator DurationMinutesPart
            TimeDesignator DurationSecondsPart

        DurationDays :
            DecimalDigits[~Sep]

        DurationDaysPart :
            DurationDays DaysDesignator

        DurationWeeks :
            DecimalDigits[~Sep]

        DurationWeeksPart :
            DurationWeeks WeeksDesignator DurationDaysPart?

        DurationMonths :
            DecimalDigits[~Sep]

        DurationMonthsPart :
            DurationMonths MonthsDesignator DurationWeeksPart
            DurationMonths MonthsDesignator DurationDaysPart?

        DurationYears :
            DecimalDigits[~Sep]

        DurationYearsPart :
            DurationYears YearsDesignator DurationMonthsPart
            DurationYears YearsDesignator DurationWeeksPart
            DurationYears YearsDesignator DurationDaysPart?

        DurationDate :
            DurationYearsPart DurationTime?
            DurationMonthsPart DurationTime?
            DurationWeeksPart DurationTime?
            DurationDaysPart DurationTime?

        Duration :
            Sign? DurationDesignator DurationDate
            Sign? DurationDesignator DurationTime

        TemporalInstantString :
            Date TimeSpecSeparator? TimeZoneOffsetRequired

        TemporalDateString :
            CalendarDateTime

        TemporalDateTimeString :
            CalendarDateTime

        TemporalDurationString :
            Duration

        TemporalMonthDayString :
            DateSpecMonthDay
            CalendarDateTime

        TemporalTimeString :
            CalendarTime
            CalendarDateTimeTimeRequired

        TemporalTimeZoneIdentifier :
            TimeZoneNumericUTCOffset
            TimeZoneIANAName

        TemporalTimeZoneString :
            TemporalTimeZoneIdentifier
            Date TimeSpecSeparator? TimeZone Calendar?

        TemporalYearMonthString :
            DateSpecYearMonth
            CalendarDateTime

        TemporalZonedDateTimeString :
            Date TimeSpecSeparator? TimeZoneNameRequired Calendar?

        TemporalCalendarString :
            CalendarName
            TemporalInstantString
            CalendarDateTime
            CalendarTime
            DateSpecYearMonth
            DateSpecMonthDay

        TemporalRelativeToString :
            TemporalDateTimeString
      </emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if |DateExtendedYear| is *"-000000"* or *"−000000"* (U+2212 MINUS SIGN followed by `000000`).
        </li>
      </ul>
    </emu-clause>

    <emu-clause id="sec-temporal-parsetemporaldurationstring" type="abstract operation">
      <h1>
        ParseTemporalDurationString (
          _isoString_: a String,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It parses an ISO 8601 duration string and returns a Duration Record.</dd>
      </dl>
      <emu-note>The value of ToIntegerOrInfinity(*""*) is 0.</emu-note>
      <emu-alg>
        1. Let _duration_ be ParseText(StringToCodePoints(_isoString_), |TemporalDurationString|).
        1. If _duration_ is a List of errors, throw a *RangeError* exception.
        1. Let each of _sign_, _years_, _months_, _weeks_, _days_, _hours_, _fHours_, _minutes_, _fMinutes_, _seconds_, and _fSeconds_ be the source text matched by the respective |Sign|, |DurationYears|, |DurationMonths|, |DurationWeeks|, |DurationDays|, |DurationWholeHours|, |DurationHoursFraction|, |DurationWholeMinutes|, |DurationMinutesFraction|, |DurationWholeSeconds|, and |DurationSecondsFraction| Parse Node enclosed by _duration_, or an empty sequence of code points if not present.
        1. Let _yearsMV_ be ! ToIntegerOrInfinity(CodePointsToString(_years_)).
        1. Let _monthsMV_ be ! ToIntegerOrInfinity(CodePointsToString(_months_)).
        1. Let _weeksMV_ be ! ToIntegerOrInfinity(CodePointsToString(_weeks_)).
        1. Let _daysMV_ be ! ToIntegerOrInfinity(CodePointsToString(_days_)).
        1. Let _hoursMV_ be ! ToIntegerOrInfinity(CodePointsToString(_hours_)).
        1. If _fHours_ is not empty, then
          1. If any of _minutes_, _fMinutes_, _seconds_, _fSeconds_ is not empty, throw a *RangeError* exception.
          1. Let _fHoursDigits_ be the substring of CodePointsToString(_fHours_) from 1.
          1. Let _fHoursScale_ be the length of _fHoursDigits_.
          1. Let _minutesMV_ be ! ToIntegerOrInfinity(_fHoursDigits_) / 10<sup>_fHoursScale_</sup> × 60.
        1. Else,
          1. Let _minutesMV_ be ! ToIntegerOrInfinity(CodePointsToString(_minutes_)).
        1. If _fMinutes_ is not empty, then
          1. If any of _seconds_, _fSeconds_ is not empty, throw a *RangeError* exception.
          1. Let _fMinutesDigits_ be the substring of CodePointsToString(_fMinutes_) from 1.
          1. Let _fMinutesScale_ be the length of _fMinutesDigits_.
          1. Let _secondsMV_ be ! ToIntegerOrInfinity(_fMinutesDigits_) / 10<sup>_fMinutesScale_</sup> × 60.
        1. Else if _seconds_ is not empty, then
          1. Let _secondsMV_ be ! ToIntegerOrInfinity(CodePointsToString(_seconds_)).
        1. Else,
          1. Let _secondsMV_ be remainder(_minutesMV_, 1) × 60.
        1. If _fSeconds_ is not empty, then
          1. Let _fSecondsDigits_ be the substring of CodePointsToString(_fSeconds_) from 1.
          1. Let _fSecondsScale_ be the length of _fSecondsDigits_.
          1. Let _millisecondsMV_ be ! ToIntegerOrInfinity(_fSecondsDigits_) / 10<sup>_fSecondsScale_</sup> × 1000.
        1. Else,
          1. Let _millisecondsMV_ be remainder(_secondsMV_, 1) × 1000.
        1. Let _microsecondsMV_ be remainder(_millisecondsMV_, 1) × 1000.
        1. Let _nanosecondsMV_ be remainder(_microsecondsMV_, 1) × 1000.
        1. If _sign_ contains the code point 0x002D (HYPHEN-MINUS) or 0x2212 (MINUS SIGN), then
          1. Let _factor_ be −1.
        1. Else,
          1. Let _factor_ be 1.
        1. Return ? CreateDurationRecord(_yearsMV_ × _factor_, _monthsMV_ × _factor_, _weeksMV_ × _factor_, _daysMV_ × _factor_, _hoursMV_ × _factor_, floor(_minutesMV_) × _factor_, floor(_secondsMV_) × _factor_, floor(_millisecondsMV_) × _factor_, floor(_microsecondsMV_) × _factor_, floor(_nanosecondsMV_) × _factor_).
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-intl-durationformat-constructor">
    <h1>The Intl.DurationFormat Constructor</h1>

    <p>The DurationFormat constructor is the <dfn>%DurationFormat%</dfn> intrinsic object and a standard built-in property of the Intl object. Behaviour common to all service constructor properties of the Intl object is specified in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

    <emu-clause id="sec-Intl.DurationFormat">
      <h1>Intl.DurationFormat ( [ _locales_ [ , _options_ ] ] )</h1>

      <p>When the `Intl.DurationFormat` function is called with optional arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _durationFormat_ be ? OrdinaryCreateFromConstructor(NewTarget, `"%DurationFormatPrototype%"`, &laquo; [[InitializedDurationFormat]], [[Locale]], [[DataLocale]], [[NumberingSystem]], [[Style]], [[YearsStyle]], [[YearsDisplay]], [[MonthsStyle]], [[MonthsDisplay]] , [[WeeksStyle]], [[WeeksDisplay]] , [[DaysStyle]], [[DaysDisplay]] , [[HoursStyle]], [[HoursDisplay]] , [[MinutesStyle]], [[MinutesDisplay]] , [[SecondsStyle]], [[SecondsDisplay]] , [[MillisecondsStyle]], [[MillisecondsDisplay]] , [[MicrosecondsStyle]], [[MicrosecondsDisplay]] , [[NanosecondsStyle]], [[NanosecondsDisplay]], [[FractionalDigits]] &raquo;).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Let _options_ be GetOptionsObject(_options_).
        1. Let _matcher_ be ? GetOption(_options_, `"localeMatcher"`, `"string"`, &laquo; `"lookup"`, `"best fit"` &raquo;, `"best fit"`).
        1. Let _numberingSystem_ be ? GetOption(_options_, `"numberingSystem"`, `"string"`, `undefined`, `undefined`).
        1. If _numberingSystem_ does not match the Unicode Locale Identifier `type` nonterminal, throw a `RangeError` exception.
        1. Let _opt_ be the Record { [[localeMatcher]]: _matcher_, [[nu]]: _numberingSystem_ }.
        1. Let _r_ be ResolveLocale(%DurationFormat%.[[AvailableLocales]], _requestedLocales_, _opt_, %DurationFormat%.[[RelevantExtensionKeys]], %DurationFormat%.[[LocaleData]]).
        1. Let _locale_ be r.[[locale]].
        1. Set _durationFormat_.[[Locale]] to _locale_.
        1. Set _durationFormat_.[[NumberingSystem]] to _r_.[[nu]].
        1. Let _style_ be ? GetOption(_options_, `"style"`, `"string"`, &laquo; `"long"`, `"short"`, `"narrow"`, `"digital"` &raquo;, `"long"`).
        1. Set _durationFormat_.[[Style]] to _style_.
        1. Set _durationFormat_.[[DataLocale]] to _r_.[[dataLocale]].
        1. Let _prevStyle_ be *undefined*.
        1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
          1. Let _styleSlot_ be the Style Slot value.
          1. Let _displaySlot_ be the Display Slot value.
          1. Let _unit_ be the Unit value.
          1. Let _valueList_ be the Values value.
          1. Let _digitalBase_ be the Digital Default value.
          1. Let _unitOptions_ be ? GetUnitOptions(_unit_, _options_, _style_, _valueList_, _digitalBase_, _prevStyle_).
          1. Set _durationFormat_.[[&lt;_styleSlot_&gt;]] to _unitOptions_.[[Style]].
          1. Set _durationFormat_.[[&lt;_displaySlot_&gt;]] to _unitOptions_.[[Display]].
          1. If _unit_ is one of `"hours"`, `"minutes"`, `"seconds"`, `"milliseconds"`, or `"microseconds"`, then
             1. Set _prevStyle_ to _unitOptions_.[[Style]].
        1. Set _durationFormat_.[[FractionalDigits]] to ? GetNumberOption(_options_, `"fractionalDigits"`, 0, 9, `undefined`).
        1. Return _durationFormat_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-constructor">
    <h1>Properties of the Intl.DurationFormat Constructor</h1>

    <p>The Intl.DurationFormat constructor has the following properties:</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype">
      <h1>Intl.DurationFormat.prototype</h1>

      <p>The value of `Intl.DurationFormat.prototype` is %DurationFormatPrototype%.</p>

      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.supportedLocalesOf">
      <h1>Intl.DurationFormat.supportedLocalesOf ( _locales_ [ , _options_ ] )</h1>

      <p>When the `supportedLocalesOf` method is called with arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. Let _availableLocales_ be %DurationFormat%.[[AvailableLocales]].
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Return ? SupportedLocales(_availableLocales_, _requestedLocales_, _options_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat-internal-slots">
      <h1>Internal slots</h1>

      <p>The value of the [[AvailableLocales]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

      <p>The value of the [[RelevantExtensionKeys]] internal slot is &laquo; `"nu"` &raquo;.</p>

      <p>The value of the [[LocaleData]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref> and the following additional constraints for all locale values _locale_:</p>

      <ul>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[nu]] must be a List as specified in <emu-xref href="#sec-intl.numberformat-internal-slots"></emu-xref>.</li>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]] must have a [[formats]] field. The value of this field must be a record, which must have fields with the names of the four formatting styles: `long`, `short`, and `narrow`. Each of first three fields must be records themselves, and each must have fields with the names of the supported units: `nanoseconds`, `microseconds`, `milliseconds`, `seconds`, `minutes`, `hours`, `days`, `weeks`, `months`, and `years`, which are Records with a field for each of the plural categories relevant for _locale_; the value corresponding to those fields is a pattern which may contain *"{0}"* to be replaced by a formatted number. The value of the fourth field, corresponding to the `digital` style, on the other hand, must be a pattern; i.e. a String that contains for an arbitrary subset of the Duration component fields a substring starting with `"{"`, followed by the name of the field, followed by `"}"`.</li>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[formats]] should have an additional [[digital]] field which is a record with just one field, [[separator]], which contains the appropriate time unit separator for that locale.</li>
      </ul>

      <emu-note>It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="http://cldr.unicode.org/">http://cldr.unicode.org/</a>).</emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-prototype-object">
    <h1>Properties of the Intl.DurationFormat Prototype Object</h1>

    <p>The Intl.DurationFormat prototype object is itself an ordinary object. <dfn>%DurationFormatPrototype%</dfn> is not an Intl.DurationFormat instance and does not have an [[InitializedDurationFormat]] internal slot or any of the other internal slots of Intl.DurationFormat instance objects.</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype.constructor">
      <h1>Intl.DurationFormat.prototype.constructor</h1>

      <p>The initial value of `Intl.DurationFormat.prototype.constructor` is the intrinsic object %DurationFormat%.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype-@@tostringtag">
      <h1>Intl.DurationFormat.prototype [ @@toStringTag ]</h1>

      <p>The initial value of the @@toStringTag property is the string value `"Intl.DurationFormat"`.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype.format">
      <h1>Intl.DurationFormat.prototype.format ( _duration_ )</h1>

      <p>When the `format` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToTemporalDurationRecord(_duration_).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be a new empty String.
        1. For each element _part_ in _formatted_, in List order, do
          1. Set _result_ to the string-concatenation of _result_ and _part_.[[Value]].
        1. Return _result_.
      </emu-alg>

      <emu-note type=editor>It's still being actively discussed if balancing should be done in DurationFormat. For more information, check out the <a href="https://github.com/tc39/proposal-intl-duration-format/issues/10">relevant github issue</a>.</emu-note>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.formatToParts">
      <h1>Intl.DurationFormat.prototype.formatToParts ( _duration_ )</h1>

      <p>When the `formatToParts` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToTemporalDurationRecord(_duration_).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be ArrayCreate(0).
        1. Let _n_ be `0`.
        1. For each element _part_ in _formatted_, in List order, do
          1. Let _obj_ be OrdinaryObjectCreate(%ObjectPrototype%).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"type"`, _part_.[[Type]]).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"value"`, _part_.[[Value]]).
          1. Perform ! CreateDataPropertyOrThrow(_result_, ! ToString(_n_), _obj_).
          1. Increment _n_ by 1.
        1. Return _result_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.resolvedOptions">
      <h1>Intl.DurationFormat.prototype.resolvedOptions ( )</h1>

      <p>This function provides access to the locale and options computed during initialization of the object.</p>

      <emu-alg>
        1. Let _df_ be the *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _options_ be ! OrdinaryObjectCreate(%ObjectPrototype%).
        1. For each row of <emu-xref href="#table-durationformat-resolvedoptions-properties"></emu-xref>, except the header row, in table order, do
          1. Let _p_ be the Property value of the current row.
          1. Let _v_ be the value of _df_'s internal slot whose name is the Internal Slot value of the current row.
          1. Assert: _v_ is not *undefined*.
          1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-durationformat-resolvedoptions-properties">
        <emu-caption>Resolved Options of DurationFormat Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Locale]]</td>
            <td>`"locale"`</td>
          </tr>
          <tr>
            <td>[[Style]]</td>
            <td>`"style"`</td>
          </tr>
          <tr>
            <td>[[YearsStyle]]</td>
            <td>`"years"`</td>
          </tr>
          <tr>
            <td>[[YearsDisplay]]</td>
            <td>`"yearsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MonthsStyle]]</td>
            <td>`"months"`</td>
          </tr>
          <tr>
            <td>[[MonthsDisplay]]</td>
            <td>`"monthsDisplay"`</td>
          </tr>
          <tr>
            <td>[[WeeksStyle]]</td>
            <td>`"weeks"`</td>
          </tr>
          <tr>
            <td>[[WeeksDisplay]]</td>
            <td>`"weeksDisplay"`</td>
          </tr>
          <tr>
            <td>[[DaysStyle]]</td>
            <td>`"days"`</td>
          </tr>
          <tr>
            <td>[[DaysDisplay]]</td>
            <td>`"daysDisplay"`</td>
          </tr>
          <tr>
            <td>[[HoursDisplay]]</td>
            <td>`"hours"`</td>
          </tr>
          <tr>
            <td>[[HoursDisplay]]</td>
            <td>`"hoursDisplay"`</td>
          </tr>
          <tr>
            <td>[[MinutesStyle]]</td>
            <td>`"minutes"`</td>
          </tr>
          <tr>
            <td>[[MinutesDisplay]]</td>
            <td>`"minutesDisplay"`</td>
          </tr>
          <tr>
            <td>[[SecondsStyle]]</td>
            <td>`"seconds"`</td>
          </tr>
          <tr>
            <td>[[SecondsDisplay]]</td>
            <td>`"secondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MillisecondsStyle]]</td>
            <td>`"milliseconds"`</td>
          </tr>
          <tr>
            <td>[[MillisecondsDisplay]]</td>
            <td>`"millisecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MicrosecondsStyle]]</td>
            <td>`"microseconds"`</td>
          </tr>
          <tr>
            <td>[[MicrosecondsDisplay]]</td>
            <td>`"microsecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[NanosecondsStyle]]</td>
            <td>`"nanoseconds"`</td>
          </tr>
          <tr>
            <td>[[NanosecondsDisplay]]</td>
            <td>`"nanosecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[FractionalDigits]]</td>
            <td>`"fractionalDigits"`</td>
          </tr>
          <tr>
            <td>[[NumberingSystem]]</td>
            <td>`"numberingSystem"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-instances">
    <h1>Properties of Intl.DurationFormat Instances</h1>

    <p>Intl.DurationFormat instances inherit properties from %DurationFormatPrototype%.</p>

    <p>Intl.DurationFormat instances have an [[InitializedDurationFormat]] internal slot.</p>

    <p>Intl.DurationFormat instances also have several internal slots that are computed by the constructor:</p>

    <ul>
      <li>[[Locale]] is a String value with the language tag of the locale whose localization is used for formatting.</li>
      <li>[[DataLocale]] is a String value with the language tag of the nearest locale for which the implementation has data to perform the formatting operation. It will be a parent locale of [[Locale]].</li>
      <li>[[NumberingSystem]] is a String value with the `"type"` given in Unicode Technical Standard 35 for the numbering system used for formatting.</li>
      <li>[[Style]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"digital"` identifying the duration formatting style used.</li>
      <li>[[YearsStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the years field.</li>
      <li>[[YearsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the years field.</li>
      <li>[[MonthsStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the months field.</li>
      <li>[[MonthsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the months field.</li>
      <li>[[WeeksStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the weeks field.</li>
      <li>[[WeeksDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the weeks field.</li>
      <li>[[DaysStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the days field.</li>
      <li>[[DaysDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the days field.</li>
      <li>[[HoursStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the hours field.</li>
      <li>[[HoursDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the hours field.</li>
      <li>[[MinutesStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the minutes field.</li>
      <li>[[MinutesDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the minutes field.</li>
      <li>[[SecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the seconds field.</li>
      <li>[[SecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the seconds field.</li>
      <li>[[MillisecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the milliseconds field.</li>
      <li>[[MillisecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the milliseconds field.</li>
      <li>[[MicrosecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the microseconds field.</li>
      <li>[[MicrosecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the microseconds field.</li>
      <li>[[NanosecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the nanoseconds field.</li>
      <li>[[NanosecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the nanoseconds field.</li>
      <li>[[FractionalDigits]] is a Number value, identifying the number of fractional digits to be used with numeric styles.</li>
    </ul>
  </emu-clause>
</emu-clause>
