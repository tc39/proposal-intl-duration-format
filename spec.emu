<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Intl.DurationFormat
stage: 2
location: https://tc39.es/proposal-intl-duration-format/
contributors: Ujjwal Sharma, Younies Mahmoud
</pre>
<emu-biblio href="./biblio.json"></emu-biblio>
<emu-clause id="durationformat-objects">
  <h1>DurationFormat Objects</h1>

  <emu-clause id="sec-intl-durationformat-abstracts">
    <h1>Abstract Operations for DurationFormat Objects</h1>

    <p>Several DurationFormat algorithms use values from the following table, which provides internal slots and property names for Duration instances, and which is also used to key Records of templates to format individual Duration components:</p>

    <emu-table id="table-duration-components">
      <emu-caption>Components of Duration Instances</emu-caption>
      <table class="real-table">
        <thead>
          <tr>
            <th>Internal Slot</th>
            <th>Property</th>
          </tr>
        </thead>
        <tr>
          <td>[[Years]]</td>
          <td>`"years"`</td>
        </tr>
        <tr>
          <td>[[Months]]</td>
          <td>`"months"`</td>
        </tr>
        <tr>
          <td>[[Weeks]]</td>
          <td>`"weeks"`</td>
        </tr>
        <tr>
          <td>[[Days]]</td>
          <td>`"days"`</td>
        </tr>
        <tr>
          <td>[[Hours]]</td>
          <td>`"hours"`</td>
        </tr>
        <tr>
          <td>[[Minutes]]</td>
          <td>`"minutes"`</td>
        </tr>
        <tr>
          <td>[[Seconds]]</td>
          <td>`"seconds"`</td>
        </tr>
        <tr>
          <td>[[Milliseconds]]</td>
          <td>`"milliseconds"`</td>
        </tr>
        <tr>
          <td>[[Microseconds]]</td>
          <td>`"microseconds"`</td>
        </tr>
        <tr>
          <td>[[Nanoseconds]]</td>
          <td>`"nanoseconds"`</td>
        </tr>
      </table>
    </emu-table>

    <emu-note type=editor>The [[Weeks]] field is still under discussion in Temporal. For more, check out the <a href="https://github.com/tc39/proposal-temporal/issues/532">Github thread</a> on the Temporal issue tracker.</emu-note>

    <emu-clause id="sec-actuallargestunit" aoid="ActualLargestUnit">
      <h1>ActualLargestUnit ( _largestUnit_, _duration_ )</h1>

      <p>The ActualLargestUnit abstract operation is called with the arguments _largestUnit_ (which must be a string) and _duration_ (which must be a Record with the fields enumerated in <emu-xref href="#table-duration-components"></emu-xref>), and returns the largest non-zero unit on _duration_ smaller than _largestUnit_. The following steps are taken:</p>

      <emu-alg>
        1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, starting from _largestUnit_, in table order, do
          1. Let _field_ be the Property value.
          1. Let _val_ be _duration_.[[&lt;_field_&gt;]].
          1. If _val_ is not `undefined` and not `0`, then
            1. Return _field_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-actualsmallestunit" aoid="ActualSmallestUnit">
      <h1>ActualSmallestUnit ( _smallestUnit_, _duration_ )</h1>

      <p>The ActualSmallestUnit abstract operation is called with the arguments _smallestUnit_ (which must be a string) and _duration_ (which must be a Record with the fields enumerated in <emu-xref href="#table-duration-components"></emu-xref>), and returns the smallest non-zero unit on _duration_ larger than _smallestUnit_. The following steps are taken:</p>

      <emu-alg>
        1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, starting from _smallestUnit_, in reverse table order, do
          1. Let _field_ be the Property value.
          1. Let _val_ be _duration_.[[&lt;_field_&gt;]].
          1. If _val_ is not `undefined` and not `0`, then
            1. Return _field_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitiondurationformatpattern" aoid="PartitionDurationFormatPattern">
      <h1>PartitionDurationFormatPattern ( _durationFormat_, _duration_ )</h1>

      <p>The PartitionDurationFormatPattern abstract operation is called with the arguments _durationFormat_ (which must be an object initialized as a DurationFormat) and _duration_ (which must be a Record with the fields enumerated in <emu-xref href="#table-duration-components"></emu-xref>), and creates the corresponding parts according to the effective locale and the formatting options of _durationFormat_. The following steps are taken:</p>

      <emu-alg>
        1. Let _result_ be a new empty List.
        1. Let _leadingZeroFields_ be _durationFormat_.[[LeadingZeroFields]].
        1. Let _internalZeroFields_ be _durationFormat_.[[InternalZeroFields]].
        1. Let _trailingZeroFields_ be _trailingZeroFields_.[[TrailingZeroFields]].
        1. Let _sign_ be ! DurationSign(_duration_.[[Years]], _duration_.[[Months]], _duration_.[[Weeks]], _duration_.[[Days]], _duration_.[[Hours]], _duration_.[[Minutes]], _duration_.[[Seconds]], _duration_.[[Milliseconds]], _duration_.[[Microseconds]], _duration_.[[Nanoseconds]]).
        1. If _sign_ is `0` and either _leadingZeroFields_, _internalZeroFields_ or _trailingZeroFields_ is `"hide"`, then
          1. Throw a `RangeError` exception.
        1. Let _start_ be _durationFormat_.[[LargestUnit]].
        1. If _leadingZeroFields_ is `"hide"`, then
          1. Set _start_ to ! ActualLargestUnit(_start_, _duration_).
        1. Let _end_ be _durationFormat_.[[SmallestUnit]].
        1. If _trailingZeroFields_ is `"hide"`, then
          1. Set _end_ to ! ActualSmallestUnit(_end_, _duration_).
        1. If _durationFormat_.[[Style]] is `"digital"`, then
          1. <mark>TODO: [[formats]].[[digital]] needs to be keyed by start and end in this case.</mark>
          1. Let _template_ be _dataLocaleData_.[[formats]].[[digital]].[[&lt;_pr_&gt;]].
          1. Let _patternParts_ be PartitionPattern(_pattern_).
          1. For each element _patternPart_ in _patternParts_, in List order, do
            1. Let _p_ be _patternPart_.[[Type]].
            1. If _p_ is `"literal"`, then
              1. Append _patternPart_ to the end of _result_.
            1. Else if _duration_.[[&lt;_p_&gt;]] is not *undefined* and _p_ exists in _durationFormat_.[[Fields]], then
              1. Let _num_ be FormatNumeric(_durationFormat_.[[NumberFormat]], _duration_.[[&lt;_p_&gt;]]).
              1. Append the new Record { [[Type]]: _p_, [[Value]]: _num_ } to the end of _result_.
        1. Else,
          1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, from _start_ to _end_, in table order, do
            1. Let _field_ be the Property value.
            1. Let _val_ be _duration_.[[&lt;_field_&gt;]].
            1. If _internalZeroFields_ is `"show"` or _val_ is not `undefined` or `0`, then
              1. Let _num_ be ! PartitionNumberPattern(_durationFormat_.[[NumberFormat]], _val_).
              1. Let _pr_ be ! ResolvePlural(_durationFormat_.[[PluralRules]], _val_).
              1. Let _dataLocale_ be _durationFormat_.[[DataLocale]].
              1. Let _localeData_ be %DurationFormat%.[[LocaleData]].
              1. Let _dataLocaleData_ be _localeData_.[[&lt;_dataLocale_&gt;]].
              1. Let _template_ be _dataLocaleData_.[[formats]].[[&lt;_style_&gt;]].[[&lt;_field_&gt;]].[[&lt;_pr_&gt;]].
              1. Let _parts_ be ! MakePartsList(_template_, _field_, _num_).
              1. Let _concat_ be an empty String.
              1. For each element _part_ in _parts_, in List order, do
                1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Value]].
                1. If _part_ has a [[Unit]] field, then
                  1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Unit]].
              1. Append the new Record { [[Type]]: _field_, [[Value]]: _concat_ } to the end of _result_.
          1. Set _result_ to ! CreatePartsFromList(_durationFormat_.[[ListFormat]], _result_).
        1. Return _result_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-intl-durationformat-constructor">
    <h1>The Intl.DurationFormat Constructor</h1>

    <p>The DurationFormat constructor is the <dfn>%DurationFormat%</dfn> intrinsic object and a standard built-in property of the Intl object. Behaviour common to all service constructor properties of the Intl object is specified in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

    <emu-clause id="sec-Intl.DurationFormat">
      <h1>Intl.DurationFormat ( [ _locales_ [ , _options_ ] ] )</h1>

      <p>When the `Intl.DurationFormat` function is called with optional arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _durationFormat_ be ? OrdinaryCreateFromConstructor(NewTarget, `"%DurationFormatPrototype%"`, &laquo; [[InitializedDurationFormat]], [[Locale]], [[DataLocale]], [[NumberingSystem]], [[Style]], [[SmallestUnit]], [[LargestUnit]], [[TrailingZeroFields]], [[LeadingZeroFields]], [[InternalZeroFields]] &raquo;).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Set _options_ to ? GetOptionsObject(_options_).
        1. Let _opt_ be a new Record.
        1. Let _matcher_ be ? GetOption(_options_, `"localeMatcher"`, `"string"`, &laquo; `"lookup"`, `"best fit"` &raquo;, `"best fit"`).
        1. Set _opt_.[[localeMatcher]] to _matcher_.
        1. Let _numberingSystem_ be ? GetOption(_options_, `"numberingSystem"`, `"string"`, `undefined`, `undefined`).
        1. If _numberingSystem_ does not match the Unicode Locale Identifier `type` nonterminal, throw a `RangeError` exception.
        1. Set _opt_.[[nu]] to _numberingSystem_.
        1. Let _localeData_ be %DurationFormat%.[[LocaleData]].
        1. Let _r_ be ResolveLocale(%DurationFormat%.[[AvailableLocales]], _requestedLocales_, _opt_, %DurationFormat%.[[RelevantExtensionKeys]], _localeData_).
        1. Let _locale_ be r.[[locale]].
        1. Set _durationFormat_.[[Locale]] to _locale_.
        1. Set _durationFormat_.[[NumberingSystem]] to _r_.[[nu]].
        1. Let _style_ be ? GetOption(_options_, `"style"`, `"string"`, &laquo; `"long"`, `"short"`, `"narrow"`, `"digital"` &raquo;, `"long"`).
        1. Set _durationFormat_.[[Style]] to _style_.
        1. Set _durationFormat_.[[DataLocale]] to _r_.[[dataLocale]].
        1. Let _smallestUnit_ be ? ToSmallestTemporalDurationUnit(_options_, &laquo; &raquo; `"nanoseconds"`).
        1. Let _largestUnit_ be ? ToTemporalDurationUnit(_options_, `"largestUnit"`, `"years"`).
        1. If _smallestUnit_ is listed above _largestUnit_ in <emu-xref href="#table-duration-components"></emu-xref>,
          1. Throw a *RangeError* exception.
        1. Set _durationFormat_.[[SmallestUnit]] to _smallestUnit_.
        1. Set _durationFormat_.[[LargestUnit]] to _largestUnit_.
        1. Let _trailingZeroFields_ be ? GetOption(_options_, `"trailingZeroFields"`, &laquo; `"show"`, `"hide"` &raquo;, `"hide"`).
        1. Let _leadingZeroFields_ be ? GetOption(_options_, `"leadingZeroFields"`, &laquo; `"show"`, `"hide"` &raquo;, `"hide"`).
        1. Let _internalZeroFields_ be ? GetOption(_options_, `"internalZeroFields"`, &laquo; `"show"`, `"hide"` &raquo;, `"hide"`).
        1. If _style_ is `"digital"` and _internalZeroFields_ is `"hide"`,
          1. Throw a *RangeError* exception.
        1. Set _durationFormat_.[[TrailingZeroFields]] to _trailingZeroFields_.
        1. Set _durationFormat_.[[LeadingZeroFields]] to _leadingZeroFields_.
        1. Set _durationFormat_.[[InternalZeroFields]] to _internalZeroFields_.
        1. <mark>TODO: consider if `"auto"` should be available here.</mark>
        1. Set _durationFormat_.[[NumberFormat]] to ! Construct(%NumberFormat%, &laquo; _locale_ &raquo;).
        1. Set _durationFormat_.[[PluralRules]] to ! Construct(%PluralRules%, &laquo; _locale_ &raquo;).
        1. If _style_ is not `"digital"`, then
          1. Set _durationFormat_.[[ListFormat]] to ! Construct(%ListFormat%, &laquo; _locale_ &raquo;).
        1. Return _durationFormat_.
      </emu-alg>
    </emu-clause>

    <emu-note type=editor>It's currently being discussed what the best API for field selection would be. For more information, check out the corresponding <a href="https://github.com/tc39/proposal-intl-duration-format/issues/3">Github thread</a>.</emu-note>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-constructor">
    <h1>Properties of the Intl.DurationFormat Constructor</h1>

    <p>The Intl.DurationFormat constructor has the following properties:</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype">
      <h1>Intl.DurationFormat.prototype</h1>

      <p>The value of `Intl.DurationFormat.prototype` is %DurationFormatPrototype%.</p>

      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.supportedLocalesOf">
      <h1>Intl.DurationFormat.supportedLocalesOf ( _locales_ [ , _options_ ] )</h1>

      <p>When the `supportedLocalesOf` method is called with arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. Let _availableLocales_ be %DurationFormat%.[[AvailableLocales]].
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Return ? SupportedLocales(_availableLocales_, _requestedLocales_, _options_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat-internal-slots">
      <h1>Internal slots</h1>

      <p>The value of the [[AvailableLocales]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

      <p>The value of the [[RelevantExtensionKeys]] internal slot is &laquo; `"nu"` &raquo;.</p>

      <p>The value of the [[LocaleData]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref> and the following additional constraints for all locale values _locale_:</p>

      <ul>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[nu]] must be a List as specified in <emu-xref href="#sec-intl.numberformat-internal-slots"></emu-xref>.</li>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]] must have a [[formats]] field. The value of this field must be a record, which must have fields with the names of the four formatting styles: `long`, `short`, `narrow`, and `digital`. Each of first three fields must be records themselves, and each must have fields with the names of the supported units: `nanoseconds`, `microseconds`, `milliseconds`, `seconds`, `minutes`, `hours`, `days`, `weeks`, `months`, and `years`, which are Records with a field for each of the plural categories relevant for _locale_; the value corresponding to those fields is a pattern which may contain *"{0}"* to be replaced by a formatted number. The value of the fourth field, corresponding to the `digital` style, on the other hand, must be a pattern; i.e. a String that contains for an arbitrary subset of the Duration component fields a substring starting with `"{"`, followed by the name of the field, followed by `"}"`.</li>
      </ul>

      <emu-note type=editor>TODO: [[formats]].[[digital]] need to be keyed by the available fields.</emu-note>
      <emu-note>It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="http://cldr.unicode.org/">http://cldr.unicode.org/</a>).</emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-prototype-object">
    <h1>Properties of the Intl.DurationFormat Prototype Object</h1>

    <p>The Intl.DurationFormat prototype object is itself an ordinary object. <dfn>%DurationFormatPrototype%</dfn> is not an Intl.DurationFormat instance and does not have an [[InitializedDurationFormat]] internal slot or any of the other internal slots of Intl.DurationFormat instance objects.</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype.constructor">
      <h1>Intl.DurationFormat.prototype.constructor</h1>

      <p>The initial value of `Intl.DurationFormat.prototype.constructor` is the intrinsic object %DurationFormat%.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype-@@tostringtag">
      <h1>Intl.DurationFormat.prototype [ @@toStringTag ]</h1>

      <p>The initial value of the @@toStringTag property is the string value `"Intl.DurationFormat"`.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype.format">
      <h1>Intl.DurationFormat.prototype.format ( _duration_ )</h1>

      <p>When the `format` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToPartialDuration(_duration_).
        1. Let _record_ be ? RoundDurationComplete(_record_, _df_.[[SmallestUnit]], _df_.[[LargestUnit]], `undefined`, 1, `"halfExpand"`).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be a new empty String.
        1. For each element _part_ in _formatted_, in List order, do
          1. Set _result_ to the string-concatenation of _result_ and _part_.[[Value]].
        1. Return _result_.
      </emu-alg>

      <emu-note type=editor>It's still being actively discussed if balancing should be done in DurationFormat. For more information, check out the <a href="https://github.com/tc39/proposal-intl-duration-format/issues/10">relevant github issue</a>.</emu-note>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.formatToParts">
      <h1>Intl.DurationFormat.prototype.formatToParts ( _duration_ )</h1>

      <p>When the `formatToParts` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToPartialDuration(_duration_).
        1. Let _record_ be ? RoundDurationComplete(_record_, _df_.[[SmallestUnit]], _df_.[[LargestUnit]], `undefined`, 1, `"halfExpand"`).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be ArrayCreate(0).
        1. Let _n_ be `0`.
        1. For each element _part_ in _formatted_, in List order, do
          1. Let _obj_ be ObjectCreate(%ObjectPrototype%).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"type"`, _part_.[[Type]]).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"value"`, _part_.[[Value]]).
          1. Perform ! CreateDataPropertyOrThrow(_result_, ! ToString(_n_), _obj_).
          1. Increment _n_ by 1.
        1. Return _result_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.resolvedOptions">
      <h1>Intl.DurationFormat.prototype.resolvedOptions ( )</h1>

      <p>This function provides access to the locale and options computed during initialization of the object.</p>

      <emu-alg>
        1. Let _df_ be the *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _options_ be ! ObjectCreate(%ObjectPrototype%).
        1. For each row of <emu-xref href="#table-durationformat-resolvedoptions-properties"></emu-xref>, except the header row, in table order, do
          1. Let _p_ be the Property value of the current row.
          1. Let _v_ be the value of _df_'s internal slot whose name is the Internal Slot value of the current row.
          1. Assert: _v_ is not *undefined*.
          1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-durationformat-resolvedoptions-properties">
        <emu-caption>Resolved Options of DurationFormat Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Locale]]</td>
            <td>`"locale"`</td>
          </tr>
          <tr>
            <td>[[NumberingSystem]]</td>
            <td>`"numberingSystem"`</td>
          </tr>
          <tr>
            <td>[[Style]]</td>
            <td>`"style"`</td>
          </tr>
          <tr>
            <td>[[SmallestUnit]]</td>
            <td>`"smallestUnit"`</td>
          </tr>
          <tr>
            <td>[[LargestUnit]]</td>
            <td>`"largestUnit"`</td>
          </tr>
          <tr>
            <td>[[TrailingZeroFields]]</td>
            <td>`"trailingZeroFields"`</td>
          </tr>
          <tr>
            <td>[[LeadingZeroFields]]</td>
            <td>`"leadingZeroFields"`</td>
          </tr>
          <tr>
            <td>[[InternalZeroFields]]</td>
            <td>`"internalZeroFields"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-instances">
    <h1>Properties of Intl.DurationFormat Instances</h1>

    <p>Intl.DurationFormat instances inherit properties from %DurationFormatPrototype%.</p>

    <p>Intl.DurationFormat instances have an [[InitializedDurationFormat]] internal slot.</p>

    <p>Intl.DurationFormat instances also have several internal slots that are computed by the constructor:</p>

    <ul>
      <li>[[Locale]] is a String value with the language tag of the locale whose localization is used for formatting.</li>
      <li>[[DataLocale]] is a String value with the language tag of the nearest locale for which the implementation has data to perform the formatting operation. It will be a parent locale of [[Locale]].</li>
      <li>[[NumberingSystem]] is a String value with the `"type"` given in Unicode Technical Standard 35 for the numbering system used for formatting.</li>
      <li>[[Style]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"digital"` identifying the duration formatting style used.</li>
      <li>[[SmallestUnit]] is one of the String values listed in <emu-xref href="#table-duration-components"></emu-xref> identifying the smallest unit in the input to be formatted.</li>
      <li>[[LargestUnit]] is one of the String values listed in <emu-xref href="#table-duration-components"></emu-xref> identifying the largest unit in the input to be formatted.</li>
      <li>[[TrailingZeroFields]] is one of the String values `"hide"`, `"show"` and `"auto"` specifying how to deal with trailing zero valued fields.</li>
      <li>[[LeadingZeroFields]] is one of the String values `"hide"`, `"show"` and `"auto"` specifying how to deal with leading zero valued fields.</li>
      <li>[[InternalZeroFields]] is one of the String values `"hide"`, `"show"` and `"auto"` specifying how to deal with internal zero valued fields.</li>
      <li>[[NumberFormat]] is an Intl.NumberFormat object used for formatting.</li>
      <li>[[PluralRules]] is an Intl.PluralRules object used for formatting.</li>
      <li>[[ListFormat]] is an Intl.ListFormat object used for formatting.</li>
    </ul>
  </emu-clause>
</emu-clause>
