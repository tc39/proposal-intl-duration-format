<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: Intl.DurationFormat
stage: 2
location: https://tc39.es/proposal-intl-duration-format/
contributors: Ujjwal Sharma, Younies Mahmoud
</pre>
<emu-biblio href="./biblio.json"></emu-biblio>
<emu-clause id="durationformat-objects">
  <h1>DurationFormat Objects</h1>

  <emu-clause id="sec-intl-durationformat-abstracts">
    <h1>Abstract Operations for DurationFormat Objects</h1>

    <p>Several DurationFormat algorithms use values from the following table, which provides internal slots and property names for Duration instances, and which is also used to key Records of templates to format individual Duration components:</p>

    <emu-table id="table-duration-components">
      <emu-caption>Components of Duration Instances</emu-caption>
      <table class="real-table">
        <thead>
          <tr>
            <th>Internal Slot</th>
            <th>Property</th>
          </tr>
        </thead>
        <tr>
          <td>[[Years]]</td>
          <td>`"years"`</td>
        </tr>
        <tr>
          <td>[[Months]]</td>
          <td>`"months"`</td>
        </tr>
        <tr>
          <td>[[Weeks]]</td>
          <td>`"weeks"`</td>
        </tr>
        <tr>
          <td>[[Days]]</td>
          <td>`"days"`</td>
        </tr>
        <tr>
          <td>[[Hours]]</td>
          <td>`"hours"`</td>
        </tr>
        <tr>
          <td>[[Minutes]]</td>
          <td>`"minutes"`</td>
        </tr>
        <tr>
          <td>[[Seconds]]</td>
          <td>`"seconds"`</td>
        </tr>
        <tr>
          <td>[[Milliseconds]]</td>
          <td>`"milliseconds"`</td>
        </tr>
        <tr>
          <td>[[Microseconds]]</td>
          <td>`"microseconds"`</td>
        </tr>
        <tr>
          <td>[[Nanoseconds]]</td>
          <td>`"nanoseconds"`</td>
        </tr>
      </table>
    </emu-table>

    <emu-clause id="sec-getunitoptions" aoid="GetUnitOptions">
      <h1>GetUnitOptions ( _unit_, _options_, _baseStyle_, _prevStyle_ )</h1>
      <p>The GetUnitOptions abstract operation is called with the arguments _unit_ (which must be a String), _options_ (which must be an Object), _baseStyle_ (which must be a String), and _prevStyle_ (which must be a String) and returns a Record containing the relevant options for that unit. The following steps are taken:</p>

      <emu-alg>
        1. Let _stylesList_ be the List &laquo; `"long"`, `"short"`, `"narrow"` &raquo;.
        1. If _unit_ is one of `"hours"`, `"minutes"`, `"seconds"`, `"milliseconds"`, `"microseconds"`, or `"nanoseconds"`, then
          1. Set _stylesList_ to the list-concatenation of _stylesList_ and &laquo; "numeric" &raquo;.
          1. If _unit_ is one of `"hours"`, `"minutes"`, or `"seconds"`, then
            1. Set _stylesList_ to the list-concatenation of _stylesList_ and &laquo; "2-digit" &raquo;.
        1. Let _style_ be ? GetOption(_options_, _unit_, _stylesList_, *undefined*).
        1. If _style_ is *undefined*, then
          1. Set _style_ to _baseStyle_.
          1. Let _displayDefault_ to `"auto"`.
        1. Else,
          1. Let _displayDefault_ to `"always"`.
        1. Let _displayField_ be the string-concatenation of _unit_ and `"Display"`.
        1. Let _display_ be ? GetOption(_options_, _displayField_, &laquo; `"auto"`, `"always"` &raquo;, _displayDefault_).
        1. If _prevStyle_ is `"numeric` or `"2-digit`, then
          1. If _style_ is not `"numeric` or `"2-digit"`, then
            1. Throw a *RangeError* exception.
          1. Else if _unit_ is `"minutes"` or `"seconds"`, then
            1. Set _style_ to `"2-digit"`.
        1. Return the Record {
          [[Style]]: _style_,
          [[Display]]: _display_
        }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitiondurationformatpattern" aoid="PartitionDurationFormatPattern">
      <h1>PartitionDurationFormatPattern ( _durationFormat_, _duration_ )</h1>

      <p>The PartitionDurationFormatPattern abstract operation is called with the arguments _durationFormat_ (which must be an object initialized as a DurationFormat) and _duration_ (which must be a Record with the fields enumerated in <emu-xref href="#table-duration-components"></emu-xref>), and creates the corresponding parts according to the effective locale and the formatting options of _durationFormat_. The following steps are taken:</p>

      <emu-alg>
        1. Let _result_ be a new empty List.
        1. If _durationFormat_.[[Style]] is `"digital"`, then
          1. <mark>TODO: [[formats]].[[digital]] needs to be keyed by which fields are available in this case.</mark>
          1. Let _template_ be _dataLocaleData_.[[formats]].[[digital]].[[&lt;_pr_&gt;]].
          1. Let _patternParts_ be PartitionPattern(_pattern_).
          1. For each element _patternPart_ in _patternParts_, in List order, do
            1. Let _p_ be _patternPart_.[[Type]].
            1. If _p_ is `"literal"`, then
              1. Append _patternPart_ to the end of _result_.
            1. Else if _duration_.[[&lt;_p_&gt;]] is not *undefined* and _p_ exists in _durationFormat_.[[Fields]], then
              1. Let _num_ be FormatNumeric(_durationFormat_.[[NumberFormat]], _duration_.[[&lt;_p_&gt;]]).
              1. Append the new Record { [[Type]]: _p_, [[Value]]: _num_ } to the end of _result_.
        1. Else,
          1. For each row in <emu-xref href="#table-duration-components"></emu-xref>, except the header row, in table order, do
            1. Let _field_ be the Property value.
            1. Let _val_ be _duration_.[[&lt;_field_&gt;]].
            1. If _val_ is not *undefined* and _field_ exists in _durationFormat_.[[Fields]], then
              1. Let _num_ be ! PartitionNumberPattern(_durationFormat_.[[NumberFormat]], _val_).
              1. Let _pr_ be ! ResolvePlural(_durationFormat_.[[PluralRules]], _val_).
              1. Let _dataLocale_ be _durationFormat_.[[DataLocale]].
              1. Let _localeData_ be %DurationFormat%.[[LocaleData]].
              1. Let _dataLocaleData_ be _localeData_.[[&lt;_dataLocale_&gt;]].
              1. Let _template_ be _dataLocaleData_.[[formats]].[[&lt;_style_&gt;]].[[&lt;_field_&gt;]].[[&lt;_pr_&gt;]].
              1. Let _parts_ be ! MakePartsList(_template_, _field_, _num_).
              1. Let _concat_ be an empty String.
              1. For each element _part_ in _parts_, in List order, do
                1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Value]].
                1. If _part_ has a [[Unit]] field, then
                  1. Set _concat_ to the string-concatenation of _concat_ and _part_.[[Unit]].
              1. Append the new Record { [[Type]]: _field_, [[Value]]: _concat_ } to the end of _result_.
          1. Set _result_ to ! CreatePartsFromList(_durationFormat_.[[ListFormat]], _result_).
        1. Return _result_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-intl-durationformat-constructor">
    <h1>The Intl.DurationFormat Constructor</h1>

    <p>The DurationFormat constructor is the <dfn>%DurationFormat%</dfn> intrinsic object and a standard built-in property of the Intl object. Behaviour common to all service constructor properties of the Intl object is specified in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

    <emu-clause id="sec-Intl.DurationFormat">
      <h1>Intl.DurationFormat ( [ _locales_ [ , _options_ ] ] )</h1>

      <p>When the `Intl.DurationFormat` function is called with optional arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _durationFormat_ be ? OrdinaryCreateFromConstructor(NewTarget, `"%DurationFormatPrototype%"`, &laquo; [[InitializedDurationFormat]], [[Locale]], [[DataLocale]], [[NumberingSystem]], [[Style]], [[YearsStyle]], [[YearsDisplay]], [[MonthsStyle]], [[MonthsDisplay]] , [[WeeksStyle]], [[WeeksDisplay]] , [[DaysStyle]], [[DaysDisplay]] , [[HoursStyle]], [[HoursDisplay]] , [[MinutesStyle]], [[MinutesDisplay]] , [[SecondsStyle]], [[SecondsDisplay]] , [[MillisecondsStyle]], [[MillisecondsDisplay]] , [[MicrosecondsStyle]], [[MicrosecondsDisplay]] , [[NanosecondsStyle]], [[NanosecondsDisplay]], [[FractionalDigits]]  &raquo;).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. If _options_ is *undefined*, then
          1. Let _options_ be ObjectCreate(*null*).
        1. Else,
          1. Let _options_ be ? ToObject(_options_).
        1. Let _opt_ be a new Record.
        1. Let _matcher_ be ? GetOption(_options_, `"localeMatcher"`, `"string"`, &laquo; `"lookup"`, `"best fit"` &raquo;, `"best fit"`).
        1. Set _opt_.[[localeMatcher]] to _matcher_.
        1. Let _numberingSystem_ be ? GetOption(_options_, `"numberingSystem"`, `"string"`, `undefined`, `undefined`).
        1. If _numberingSystem_ does not match the Unicode Locale Identifier `type` nonterminal, throw a `RangeError` exception.
        1. Set _opt_.[[nu]] to _numberingSystem_.
        1. Let _localeData_ be %DurationFormat%.[[LocaleData]].
        1. Let _r_ be ResolveLocale(%DurationFormat%.[[AvailableLocales]], _requestedLocales_, _opt_, %DurationFormat%.[[RelevantExtensionKeys]], _localeData_).
        1. Let _locale_ be r.[[locale]].
        1. Set _durationFormat_.[[Locale]] to _locale_.
        1. Set _durationFormat_.[[NumberingSystem]] to _r_.[[nu]].
        1. Let _style_ be ? GetOption(_options_, `"style"`, `"string"`, &laquo; `"long"`, `"short"`, `"narrow"`, `"digital"` &raquo;, `"long"`).
        1. Set _durationFormat_.[[Style]] to _style_.
        1. Set _durationFormat_.[[DataLocale]] to _r_.[[dataLocale]].
        1. Let _yearsOptions_ be ? GetUnitOptions(`"years"`, _options_, _style_).
        1. Set _durationFormat_.[[YearsStyle]] to _yearsOptions_.[[Style]].
        1. Set _durationFormat_.[[YearsDisplay]] to _yearsOptions_.[[Display]].
        1. Let _monthsOptions_ be ? GetUnitOptions(`"months"`, _options_, _style_).
        1. Set _durationFormat_.[[MonthsStyle]] to _monthsOptions_.[[Style]].
        1. Set _durationFormat_.[[MonthsDisplay]] to _monthsOptions_.[[Display]].
        1. Let _weeksOptions_ be ? GetUnitOptions(`"weeks"`, _options_, _style_).
        1. Set _durationFormat_.[[WeeksStyle]] to _weeksOptions_.[[Style]].
        1. Set _durationFormat_.[[WeeksDisplay]] to _weeksOptions_.[[Display]].
        1. Let _daysOptions_ be ? GetUnitOptions(`"days"`, _options_, _style_).
        1. Set _durationFormat_.[[DaysStyle]] to _daysOptions_.[[Style]].
        1. Set _durationFormat_.[[DaysDisplay]] to _daysOptions_.[[Display]].
        1. Let _hoursOptions_ be ? GetUnitOptions(`"hours"`, _options_, _style_).
        1. Set _durationFormat_.[[HoursStyle]] to _hoursOptions_.[[Style]].
        1. Set _durationFormat_.[[HoursDisplay]] to _hoursOptions_.[[Display]].
        1. Let _minutesOptions_ be ? GetUnitOptions(`"minutes"`, _options_, _style_, _durationFormat_.[[HoursStyle]]).
        1. Set _durationFormat_.[[MinutesStyle]] to _minutesOptions_.[[Style]].
        1. Set _durationFormat_.[[MinutesDisplay]] to _minutesOptions_.[[Display]].
        1. Let _secondsOptions_ be ? GetUnitOptions(`"seconds"`, _options_, _style_, _durationFormat_.[[MinutesStyle]]).
        1. Set _durationFormat_.[[SecondsStyle]] to _secondsOptions_.[[Style]].
        1. Set _durationFormat_.[[SecondsDisplay]] to _secondsOptions_.[[Display]].
        1. Let _millisecondsOptions_ be ? GetUnitOptions(`"milliseconds"`, _options_, _style_, _durationFormat_.[[SecondsStyle]]).
        1. Set _durationFormat_.[[MillisecondsStyle]] to _millisecondsOptions_.[[Style]].
        1. Set _durationFormat_.[[MillisecondsDisplay]] to _millisecondsOptions_.[[Display]].
        1. Let _microsecondsOptions_ be ? GetUnitOptions(`"microseconds"`, _options_, _style, _durationFormat_.[[MicrosecondsStyle]]_).
        1. Set _durationFormat_.[[MicrosecondsStyle]] to _microsecondsOptions_.[[Style]].
        1. Set _durationFormat_.[[MicrosecondsDisplay]] to _microsecondsOptions_.[[Display]].
        1. Let _nanosecondsOptions_ be ? GetUnitOptions(`"nanoseconds"`, _options_, _style_, _durationFormat_.[[NanosecondsStyle]]).
        1. Set _durationFormat_.[[NanosecondsStyle]] to _nanosecondsOptions_.[[Style]].
        1. Set _durationFormat_.[[NanosecondsDisplay]] to _nanosecondsOptions_.[[Display]].
        1. Set _durationFormat_.[[FractionalDigits]] to ? GetNumberOption(_options_, `"fractionalDigits"`, 0, 9, `undefined`).
        1. Set _durationFormat_.[[NumberFormat]] to ! Construct(%NumberFormat%, &laquo; _locale_ &raquo;).
        1. Set _durationFormat_.[[PluralRules]] to ! Construct(%PluralRules%, &laquo; _locale_ &raquo;).
        1. If _style_ is not `"digital"`, then
          1. Set _durationFormat_.[[ListFormat]] to ! Construct(%ListFormat%, &laquo; _locale_ &raquo;).
        1. Return _durationFormat_.
      </emu-alg>
    </emu-clause>

    <emu-note type=editor>It's currently being discussed what the best API for field selection would be. For more information, check out the corresponding <a href="https://github.com/tc39/proposal-intl-duration-format/issues/3">Github thread</a>.</emu-note>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-constructor">
    <h1>Properties of the Intl.DurationFormat Constructor</h1>

    <p>The Intl.DurationFormat constructor has the following properties:</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype">
      <h1>Intl.DurationFormat.prototype</h1>

      <p>The value of `Intl.DurationFormat.prototype` is %DurationFormatPrototype%.</p>

      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.supportedLocalesOf">
      <h1>Intl.DurationFormat.supportedLocalesOf ( _locales_ [ , _options_ ] )</h1>

      <p>When the `supportedLocalesOf` method is called with arguments _locales_ and _options_, the following steps are taken:</p>

      <emu-alg>
        1. Let _availableLocales_ be %DurationFormat%.[[AvailableLocales]].
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Return ? SupportedLocales(_availableLocales_, _requestedLocales_, _options_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat-internal-slots">
      <h1>Internal slots</h1>

      <p>The value of the [[AvailableLocales]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref>.</p>

      <p>The value of the [[RelevantExtensionKeys]] internal slot is &laquo; `"nu"` &raquo;.</p>

      <p>The value of the [[LocaleData]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref> and the following additional constraints for all locale values _locale_:</p>

      <ul>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]].[[nu]] must be a List as specified in <emu-xref href="#sec-intl.numberformat-internal-slots"></emu-xref>.</li>
        <li>[[LocaleData]].[[&lt;_locale_&gt;]] must have a [[formats]] field. The value of this field must be a record, which must have fields with the names of the four formatting styles: `long`, `short`, `narrow`, and `digital`. Each of first three fields must be records themselves, and each must have fields with the names of the supported units: `nanoseconds`, `microseconds`, `milliseconds`, `seconds`, `minutes`, `hours`, `days`, `weeks`, `months`, and `years`, which are Records with a field for each of the plural categories relevant for _locale_; the value corresponding to those fields is a pattern which may contain *"{0}"* to be replaced by a formatted number. The value of the fourth field, corresponding to the `digital` style, on the other hand, must be a pattern; i.e. a String that contains for an arbitrary subset of the Duration component fields a substring starting with `"{"`, followed by the name of the field, followed by `"}"`.</li>
      </ul>

      <emu-note type=editor>TODO: [[formats]].[[digital]] need to be keyed by the available fields.</emu-note>
      <emu-note>It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="http://cldr.unicode.org/">http://cldr.unicode.org/</a>).</emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-prototype-object">
    <h1>Properties of the Intl.DurationFormat Prototype Object</h1>

    <p>The Intl.DurationFormat prototype object is itself an ordinary object. <dfn>%DurationFormatPrototype%</dfn> is not an Intl.DurationFormat instance and does not have an [[InitializedDurationFormat]] internal slot or any of the other internal slots of Intl.DurationFormat instance objects.</p>

    <emu-clause id="sec-Intl.DurationFormat.prototype.constructor">
      <h1>Intl.DurationFormat.prototype.constructor</h1>

      <p>The initial value of `Intl.DurationFormat.prototype.constructor` is the intrinsic object %DurationFormat%.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype-@@tostringtag">
      <h1>Intl.DurationFormat.prototype [ @@toStringTag ]</h1>

      <p>The initial value of the @@toStringTag property is the string value `"Intl.DurationFormat"`.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>

    <emu-clause id="sec-Intl.DurationFormat.prototype.format">
      <h1>Intl.DurationFormat.prototype.format ( _duration_ )</h1>

      <p>When the `format` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToPartialDuration(_duration_).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be a new empty String.
        1. For each element _part_ in _formatted_, in List order, do
          1. Set _result_ to the string-concatenation of _result_ and _part_.[[Value]].
        1. Return _result_.
      </emu-alg>

      <emu-note type=editor>It's still being actively discussed if balancing should be done in DurationFormat. For more information, check out the <a href="https://github.com/tc39/proposal-intl-duration-format/issues/10">relevant github issue</a>.</emu-note>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.formatToParts">
      <h1>Intl.DurationFormat.prototype.formatToParts ( _duration_ )</h1>

      <p>When the `formatToParts` method is called with an argument _duration_, the following steps are taken:</p>

      <emu-alg>
        1. Let _df_ be *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _record_ be ? ToPartialDuration(_duration_).
        1. Let _formatted_ be ? PartitionDurationFormatPattern(_df_, _record_).
        1. Let _result_ be ArrayCreate(0).
        1. Let _n_ be `0`.
        1. For each element _part_ in _formatted_, in List order, do
          1. Let _obj_ be ObjectCreate(%ObjectPrototype%).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"type"`, _part_.[[Type]]).
          1. Perform ! CreateDataPropertyOrThrow(_obj_, `"value"`, _part_.[[Value]]).
          1. Perform ! CreateDataPropertyOrThrow(_result_, ! ToString(_n_), _obj_).
          1. Increment _n_ by 1.
        1. Return _result_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-Intl.DurationFormat.prototype.resolvedOptions">
      <h1>Intl.DurationFormat.prototype.resolvedOptions ( )</h1>

      <p>This function provides access to the locale and options computed during initialization of the object.</p>

      <emu-alg>
        1. Let _df_ be the *this* value.
        1. Perform ? RequireInternalSlot(_df_, [[InitializedDurationFormat]]).
        1. Let _options_ be ! ObjectCreate(%ObjectPrototype%).
        1. For each row of <emu-xref href="#table-durationformat-resolvedoptions-properties"></emu-xref>, except the header row, in table order, do
          1. Let _p_ be the Property value of the current row.
          1. Let _v_ be the value of _df_'s internal slot whose name is the Internal Slot value of the current row.
          1. Assert: _v_ is not *undefined*.
          1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-durationformat-resolvedoptions-properties">
        <emu-caption>Resolved Options of DurationFormat Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Locale]]</td>
            <td>`"locale"`</td>
          </tr>
          <tr>
            <td>[[NumberingSystem]]</td>
            <td>`"numberingSystem"`</td>
          </tr>
          <tr>
            <td>[[Style]]</td>
            <td>`"style"`</td>
          </tr>
          <tr>
            <td>[[YearsStyle]]</td>
            <td>`"years"`</td>
          </tr>
          <tr>
            <td>[[YearsDisplay]]</td>
            <td>`"yearsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MonthsStyle]]</td>
            <td>`"months"`</td>
          </tr>
          <tr>
            <td>[[MonthsDisplay]]</td>
            <td>`"monthsDisplay"`</td>
          </tr>
          <tr>
            <td>[[WeeksStyle]]</td>
            <td>`"weeks"`</td>
          </tr>
          <tr>
            <td>[[WeeksDisplay]]</td>
            <td>`"weeksDisplay"`</td>
          </tr>
          <tr>
            <td>[[DaysStyle]]</td>
            <td>`"days"`</td>
          </tr>
          <tr>
            <td>[[DaysDisplay]]</td>
            <td>`"daysDisplay"`</td>
          </tr>
          <tr>
            <td>[[HoursDisplay]]</td>
            <td>`"hours"`</td>
          </tr>
          <tr>
            <td>[[HoursDisplay]]</td>
            <td>`"hoursDisplay"`</td>
          </tr>
          <tr>
            <td>[[MinutesStyle]]</td>
            <td>`"minutes"`</td>
          </tr>
          <tr>
            <td>[[MinutesDisplay]]</td>
            <td>`"minutesDisplay"`</td>
          </tr>
          <tr>
            <td>[[SecondsStyle]]</td>
            <td>`"seconds"`</td>
          </tr>
          <tr>
            <td>[[SecondsDisplay]]</td>
            <td>`"secondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MillisecondsStyle]]</td>
            <td>`"milliseconds"`</td>
          </tr>
          <tr>
            <td>[[MillisecondsDisplay]]</td>
            <td>`"millisecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[MicrosecondsStyle]]</td>
            <td>`"microseconds"`</td>
          </tr>
          <tr>
            <td>[[MicrosecondsDisplay]]</td>
            <td>`"microsecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[NanosecondsStyle]]</td>
            <td>`"nanoseconds"`</td>
          </tr>
          <tr>
            <td>[[NanosecondsDisplay]]</td>
            <td>`"nanosecondsDisplay"`</td>
          </tr>
          <tr>
            <td>[[FractionalDigits]]</td>
            <td>`"fractionalDigits"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-durationformat-instances">
    <h1>Properties of Intl.DurationFormat Instances</h1>

    <p>Intl.DurationFormat instances inherit properties from %DurationFormatPrototype%.</p>

    <p>Intl.DurationFormat instances have an [[InitializedDurationFormat]] internal slot.</p>

    <p>Intl.DurationFormat instances also have several internal slots that are computed by the constructor:</p>

    <ul>
      <li>[[Locale]] is a String value with the language tag of the locale whose localization is used for formatting.</li>
      <li>[[DataLocale]] is a String value with the language tag of the nearest locale for which the implementation has data to perform the formatting operation. It will be a parent locale of [[Locale]].</li>
      <li>[[NumberingSystem]] is a String value with the `"type"` given in Unicode Technical Standard 35 for the numbering system used for formatting.</li>
      <li>[[Style]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"digital"` identifying the duration formatting style used.</li>
      <li>[[YearsStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the years field.</li>
      <li>[[YearsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the years field.</li>
      <li>[[MonthsStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the months field.</li>
      <li>[[MonthsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the months field.</li>
      <li>[[WeeksStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the weeks field.</li>
      <li>[[WeeksDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the weeks field.</li>
      <li>[[DaysStyle]] is one of the String values `"long"`, `"short"`, or `"narrow"` identifying the formatting style used for the days field.</li>
      <li>[[DaysDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the days field.</li>
      <li>[[HoursStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the hours field.</li>
      <li>[[HoursDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the hours field.</li>
      <li>[[MinutesStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the minutes field.</li>
      <li>[[MinutesDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the minutes field.</li>
      <li>[[SecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, `"2-digit"`, or `"numeric"` identifying the formatting style used for the seconds field.</li>
      <li>[[SecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the seconds field.</li>
      <li>[[MillisecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the milliseconds field.</li>
      <li>[[MillisecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the milliseconds field.</li>
      <li>[[MicrosecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the microseconds field.</li>
      <li>[[MicrosecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the microseconds field.</li>
      <li>[[NanosecondsStyle]] is one of the String values `"long"`, `"short"`, `"narrow"`, or `"numeric"` identifying the formatting style used for the nanoseconds field.</li>
      <li>[[NanosecondsDisplay]] is one of the String values `"auto"` or `"always"` identifying when to display the nanoseconds field.</li>
      <li>[[FractionalDigits]] is a Number value, identifying the number of fractional digits to be used with numeric styles.</li>
      <li>[[NumberFormat]] is an Intl.NumberFormat object used for formatting.</li>
      <li>[[PluralRules]] is an Intl.PluralRules object used for formatting.</li>
      <li>[[ListFormat]] is an Intl.ListFormat object used for formatting.</li>
    </ul>
  </emu-clause>
</emu-clause>
